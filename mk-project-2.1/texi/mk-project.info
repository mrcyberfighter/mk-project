This is mk-project.info, produced by makeinfo version 6.4.90 from
mk-project.texi.

     mk-project 2.1, Nov 15, 2017

     Brüggemann Eddie

     Copyright © 2017, Brüggemann Eddie

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* mk-project: (mk-project.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.5.6.


File: mk-project.info,  Node: Top,  Next: mk-project,  Up: (dir)

mk-project Documentation
************************

     mk-project 2.1, Nov 15, 2017

     Brüggemann Eddie

     Copyright © 2017, Brüggemann Eddie

* Menu:

* mk-project::
* Building a mk-project project::
* Working on an existing mk-project project::
* mk-project documentation::
* mk-project code investigating, debugging and disassembling: mk-project code investigating debugging and disassembling.
* mk-project code formatters::
* mk-project contributing advices::
* *.todo or *.tdo file format specifications;: * todo or * tdo file format specifications.
* About mk-project::
* mk-project Gtk3 types::
* Indices and tables::
* Index::

 — The Detailed Node Listing —

mk-project

* Presentation::
* Hackme::
* What provide mk-project::
* How mk-project works::
* Author(s): Author s.
* Contributor(s): Contributor s.
* The future of mk-project::

The future of mk-project

* mk-project; mic-on !!!: mk-project mic-on !!!.

Building a mk-project project

* Starting::
* C/C++ Compiler settings::
* Files::
* Disassembling::
* Profiling::
* C/C++ code formatters::
* Documentation::
* About informations::
* Others Informations::
* Licensing::
* *.desktop file: * desktop file.
* Archiving your project::
* Summary::

Profiling

* Oprofile::
* Valgrind::

Documentation

* man-page::

Summary

* Exporting your settings::

Working on an existing mk-project project

* Open an mk-project project::
* Reconfiguring an existing project::
* Adding files to your project::

mk-project documentation

* Introduction::
* You are a sphinx user;: You are a sphinx user.
* You aren't a sphinx user::
* mk-project documentation visualize::
* mk-project slots::
* rst2man::

mk-project code investigating, debugging and disassembling

* Introduction: Introduction<2>.
* The make info target::
* The make gdb target::
* The make ldd target::
* The make nm target::
* The make objdump target::
* The make strace target::
* The make ltrace target::
* The make strip target::
* Oprofile targets::
* Valgrind targets::
* Alternative to *_OPTS::
* Documentation Source::

The make info target

* The file utility::
* The size utility::

mk-project code formatters

* Introduction: Introduction<3>.
* Using the indent utility::
* Using the astyle utility::

Introduction

* For C or C++ source code;: For C or C++ source code.

mk-project contributing advices

* mk-project zen::
* How contibute ?::
* Makefile: Makefile<2>.
* code formatters::

How contibute ?

* For writing a new project;: For writing a new project.
* Makefile::
* Scripting::
* Becoming::
* NOTES::

Makefile

* BINARIES::
* VARIABLES::
* Files: Files<2>.
* FILES and FILEPATH::
* LIBRARIES::
* TARGETS::
* ADVICES::

code formatters

* C::
* C++::
* HTML::
* CSS::
* Javascipt::
* Perl::
* PHP::
* Ruby::
* XML::
* Using a code formatter::

*.todo or *.tdo file format specifications:

* Markup syntax::
* Markup Types::
* Priority_level::
* TASK_ORDER::
* Advices::
* Syntax of *.todo file(s) content: Syntax of * todo file s content.
* End word of specifications of the *.todo file(s) format: End word of specifications of the * todo file s format.
* Example of a *.todo file;: Example of a * todo file.
* License::

Markup Types

* Before complete the task;: Before complete the task.
* After complete the task;: After complete the task.
* Summary of TYPE::

Syntax of *.todo file(s) content

* For Titles::
* For text decorations;: For text decorations.
* For Lists;: For Lists.
* For keywords values pairing;: For keywords values pairing.
* For links;: For links.
* For footnotes;: For footnotes.
* For comments;: For comments.
* For code text;: For code text.

About mk-project

* A word from the author::
* Dependencies::

Dependencies

* Libraries::
* Main program::
* Documentation: Documentation<2>.
* Debugging::
* Code formatters::
* Internationalisation::
* Documentation Source: Documentation Source<2>.
* THANKS::
* Author final word;: Author final word.

Documentation Source

* ISO (ISO/IEC 9899;19999, C language) conform compiler list: ISO ISO/IEC 9899 19999 C language conform compiler list.

mk-project Gtk3 types

* GtkSmartIconButton::
* GtkSmartIconButton: GtkSmartIconButton<2>.
* GtkTermTab::
* GtkMkTerm::

GtkSmartIconButton

* Getters::

GtkSmartIconButton

* Constructors::

GtkTermTab

* Constructor::
* Getters: Getters<2>.

GtkMkTerm

* Constructor: Constructor<2>.
* Getters: Getters<3>.



File: mk-project.info,  Node: mk-project,  Next: Building a mk-project project,  Prev: Top,  Up: Top

1 ‘mk-project’
**************


author: Brüggemann Eddie <<mrcyberfighter@gmail.com>>


program: mk-project


version: 2.1


language: C


release: Nov 15, 2017

* Menu:

* Presentation::
* Hackme::
* What provide mk-project::
* How mk-project works::
* Author(s): Author s.
* Contributor(s): Contributor s.
* The future of mk-project::


File: mk-project.info,  Node: Presentation,  Next: Hackme,  Up: mk-project

1.1 Presentation
================

‘mk-project’ is a `C' and `C++' project builder, with a nice G.U.I
(Graphical User Interface), which generate at first a big, big do it
all, ‘Makefile’.

So that you can create a project and keep the tree of your project,
which reflect the UNIX file system tree.


note: ‘mk-project’ does not claim to replace the auto-tools but it is
build on the top in the spirit of development instead of distributing.

      

In addition ‘vim’ or others T.U.I (Terminal User Interface) editors
users,

can use the entire program by editing their source files into the
Terminals ‣ Edit terminal which is a notebook, you can adding as many
terminals you want.

      

Else ‘mk-project’ is a tool done to `ease the development process' of
`C' or `C++' programs and a good bridge for the distributing process.
Especially with the `autotools'.

‘mk-project’ is a T.D.E (Terminal Development Environment) (`T'erminal
`D'evelopement `E'nvironment):

     an `utility' used for the `development' of `programs' with many
     functionalities !

‘mk-project’ is based on the ‘make’ tool which on his turn, use severals
utilities, for providing many features

and so many useful ‘make’ targets.

Callable through a terminal, in preference (or through the G.U.I from
‘mk-project’: targets ‣ *).

      

‘mk-project’ is an ‘Environment’ in the terms of his wide field of
‘targets’ which aren’t statically at all.

But `dynamically' `configurable', `changeable' and `self-build-able' and
so that the grass becomes greener...

The ‘targets’ are short string easy to remember and so you can make work

   * your computer, through the terminals

   * and mostly your head through `remembering', `configuring',
     `modifying' and `creating' ‘targets’.

And not become an I.D.E (`I'ntegrated `D'evelopment `E'nvironment)
`zombie' thrashing his head and knows !

But a proud well informed programmer which knows exactly how his system
and environment works which can easily automate the task using the
‘make’ syntax.


File: mk-project.info,  Node: Hackme,  Next: What provide mk-project,  Prev: Presentation,  Up: mk-project

1.2 Hackme
==========

You can `edit' the ‘Makefile’ by hand at your convenience, of course `!'

     Note: But I think It’s better for some *note generic targets to
     include: 7. them directly

     into the template file(s) you will find at ‘$(pkgdatadir)’:
     ‘/usr(/local/share/mk-project/templates/*’

     So that you get it every time you generate a new project.


     warning: If you do this: you must take care of escaping the ’%’
     with a ’%’ character : "%%".

     But think to notify the *note developers: 8,

     to inform them about your add-on(s) if you think it’s reliable and
     usable for others.


File: mk-project.info,  Node: What provide mk-project,  Next: How mk-project works,  Prev: Hackme,  Up: mk-project

1.3 What provide ‘mk-project’
=============================

     Note: At the time i write this documentation ‘mk-project’ support:

     the `C' and `C++' programming language.

     `"I invite all the community to work together to take in charge
     more languages..."'


     file: *note see this document for participating (You can become
     from the simple contributor to the entire coauthor).: a.

   + ‘mk-project’ provide at first a solid base for building a work,

     through a big Makefile, which can be edited manually in respect of
     the following few conventions:

     Note: 
        + Configuration settings are set through the string:

             + `F' For false (disable option).

             + `T' for true (enable option).

        + Some few others variables:

          The variable ‘$(SRC_FILES)’ is build from the variable
          ‘$(SRC_DIR)’ which value is always: ‘./src’.

               This mean if you want to add files manually (`if you
               doesn’t use the GUI for this task') to your Makefile,

               do it properly by using the ‘$(SRC_DIR)’ variable:

                    SRC_DIR   = ./src

                    SRC_FILES = ${SRC_DIR}/my_file${EXT_SRC} \
                                ${SRC_DIR}/subfolder/my_file${EXT_SRC}

               So you will add file(s) relative to the ‘./src’ directory
               where source file(s) have to reside.


               note: Otherwise simply use the G.U.I for adding file(s)
               Project -> Add file(s) to project.

   + A building system for your source files.

   + Many tools for machine code investigation:

     From the simple `-g' option setting by a ‘GNU-Compiler’ for
     debbuging with ‘gdb’, through `disassemble' the `machine code'
     files and `executable tracing', to `profiling' the entire work.

   + For the documentation ‘mk-project’ support *note the sphinx
     documentation generator: b.

     The ‘sphinx’ documentation ‘targets’ support many output formats:

        + `info' files.

        + `man' (manual pages).

        + `HTML', single `HTML', and `texi HTML' documentation.

        + `PDF' and `LATEXPDF' files.

        + `XML' files.

        + `LATEX' files.

        + `EPUB' files.

     `And many more' through ‘sphinx’ like: `qthelp', `applehelp',
     `xml', `json' or `devhelp' per example.

‘mk-project’ provide a simple G.U.I composing of terminals and a
menu-bar.

At first you can use the menu items to perform some actions like:

        + Generate a new project: Project -> New Project.

          Then you have to configure your project answering some basics
          questions like:

             * Programming language.

             * Program name

             * Project folder (in which the new project will be
               generate).

          And some others according to your settings.

     Once the new project is generated you can access to the make
     targets either through the ‘mk-project’ G.U.I menu-bar (`simple
     click on the wanted target to execute it !').

     Or from the terminal of ‘mk-project’ or any else terminal at the
     condition to be in the ‘Makefile’ current folder.


     note: Simply type ‘$ make help’ to get the list of available
     targets.

          Warning: If you add some user-targets, to the ‘Makefile(s)’,
          think at adding them to the ‘$ make help’ output.

          So that mk-project can auto-detect your target and list it to
          add it as menu item to the make targets.

          If you add a bash comment on the same line it will be
          displayed as tool-tip by overfly the menu items.


          warning: Simply think to limit your entry at terminal maximal
          size: 79 characters.

So ‘mk-project’ provide another terminals ordered in tabs which you can
add, remove, and configuring.

For purpose of terminals editor users like ‘vi’, ‘ed’, ‘emacs’ which can
be easily launch an instance their favorite ‘terminal editor’ in every
tab all that continuing using the ‘mk-project’ `interface'.

Finally you can switch between the single terminals -> make terminal
(which should stay in the ‘Makefile’ current folder) and the terminals
-> edit terminals terminals using the menu radio items.


File: mk-project.info,  Node: How mk-project works,  Next: Author s,  Prev: What provide mk-project,  Up: mk-project

1.4 How ‘mk-project’ works
==========================


note: The answers is simply ‘all is make in Makefiles’, which will make
you `the development easier'.

‘mk-project’ doesn’t claim to replace an `IDE' or others `building
tools' but only give you an alternative

which ‘you can entirely adapt’ to your requirement.

     Note: For being `true' the ‘make’ tool implementation and the way
     it make you the life easier

     without forgetting your ‘TTY Knows’ has impress me so that

     I couldn’t develop a good project without it

     or in others words:

          If the make tool have never exist I would invent it...


File: mk-project.info,  Node: Author s,  Next: Contributor s,  Prev: How mk-project works,  Up: mk-project

1.5 Author(s)
=============


Developer: Brüggemann Eddie <mrcyberfighter@gmail>


Documenter: Brüggemann Eddie <mrcyberfighter@gmail>


File: mk-project.info,  Node: Contributor s,  Next: The future of mk-project,  Prev: Author s,  Up: mk-project

1.6 Contributor(s)
==================

`Become one !!!'


File: mk-project.info,  Node: The future of mk-project,  Prev: Contributor s,  Up: mk-project

1.7 The future of ‘mk-project’
==============================

* Menu:

* mk-project; mic-on !!!: mk-project mic-on !!!.


File: mk-project.info,  Node: mk-project mic-on !!!,  Up: The future of mk-project

1.7.1 ‘mk-project’: ‘mic-on’ !!!
--------------------------------

     Note: The idea is to sit in front of the interface of ‘mk-project’
     (‘microphone on’ `!'),

     writing the `source code' from your last creation:

     And to say ‘execute: make exec’, or the target you want...

     The `program' could `react' by `analyzing your voice entry' and
     `executing the target' !!!

     So that the build is `automate' by (`simple') `voice recognition'.

     So you can write your `program' with your hands

          and

     `build it' with by emitting a `simple order' so that the `program
     execute the corresponding target',

     if recognize...

     `What do you think about it ?'


     note: We could enhance ‘mk-project’ in the way of Speech
     recognition...


File: mk-project.info,  Node: Building a mk-project project,  Next: Working on an existing mk-project project,  Prev: mk-project,  Up: Top

2 Building a ‘mk-project’ project
*********************************

* Menu:

* Starting::
* C/C++ Compiler settings::
* Files::
* Disassembling::
* Profiling::
* C/C++ code formatters::
* Documentation::
* About informations::
* Others Informations::
* Licensing::
* *.desktop file: * desktop file.
* Archiving your project::
* Summary::


File: mk-project.info,  Node: Starting,  Next: C/C++ Compiler settings,  Up: Building a mk-project project

2.1 Starting
============

At first some basic informations will be required:

   + The programming language from the project.

        + `C'

     Or

        + `C++'

   + The project name which will become the program name

     the binary name.

   + The `program version' which, if empty will be arbitrary set to the
     value ‘0.0’.

   + The folder where to generate the project.


     warning: The folder must be empty (Advice: create it with the
     folder-chooser at the same time as the project).

   + The license of your project.

        + GPL

        + AGPL

        + LGPL

        + FDL

        + Apache 2.0 License

        + Clear BSD

        + Free BSD

        + Other


note: The license files will be copied into the project folder according
to your choice of format(s).

   * docbook

   * epub

   * pdf

   * latex

   * html

   * texinfo

   * text


File: mk-project.info,  Node: C/C++ Compiler settings,  Next: Files,  Prev: Starting,  Up: Building a mk-project project

2.2 `C'/`C++' Compiler settings
===============================

For every entry except the "Compiler entry" you get an aside button
which

will permit you to add the `most common settings' `easily'.

   + `Compiler:'

     You can choose a compiler to use, which default to ‘cc’ for a `C'
     project and ‘c++’ for `C++'.

     But you can set clang per example or the compiler you want.


     warning: The exactness of your entry will be checked by compiling a
     minimal program.

   + `Warnings:'

     You can set the warnings to use.

          Note: The aside button will permit you to insert as warnings
          the following most common warnings settings:

             + ‘-Wall’ (`All warning: sea the documentation of your
               compiler to see which are enabled').

             + ‘-Wextra’ (`Extra warning: sea the documentation of your
               compiler to see which are enabled').

             + ‘-Wpedantic’ (`ISO conform: most extension are permitted.
               sea the documentation of your compiler to see which are
               enabled').

             + ‘-w’ (`No output warnings').

             + ‘-Werror’ (`A warning is consider as an error').


     warning: The field is empty per default.

   + `CFLAGS:'

     You can set the argument to give to the compiler (like -g,
     -O2,...).

          Note: The aside button provide few flags adding:

             + ‘-g’

             + ‘-O[0123gsf]’

             + ‘-std=’

             + ‘-pedantic’

   + `CPPFLAGS:'

     Preprocessor instruction to pass onto the compile command line.

          Note: The aside button permit you to define a definition with
          a value or without.

   + `LDFLAGS:'

     Dynamic Linker Flags.

          Note: The aside button will permit you to choose the
          ‘pkg-config’

          you want to add to your project.

          By listing all the ‘pkg-config’ available on your system.


     warning: By hand editing, if you use ‘pkg-config’, use the
     back-ticks syntax:

     Else this will not work because of the make syntax.

   + `LDLIBS:'

     Dynamic Linker library libraries: per example ‘-lm’.

          Note: The aside button will permit you to add the linker of
          your choice.

          By listing all linker flags available on your system.


File: mk-project.info,  Node: Files,  Next: Disassembling,  Prev: C/C++ Compiler settings,  Up: Building a mk-project project

2.3 Files
=========

Here you must set the extension you will use for the source and header
files.

Especially for the `C++' language:

   + Source files:

        + `.cpp'

        + `.CPP'

        + `.c++'

        + `.C'


     warning: `This is very important' because of the compilation
     automation which will `not work' with the `wrong extension'.

   + Header files:

        + `.h'

        + `.hh'

        + `.H'

        + `.hp'

        + `.hxx'

        + `.hpp'

        + `.HPP'

        + `.h++'

        + `.tcc'


note: For the `C' language this default to `.c' and `.h'.


File: mk-project.info,  Node: Disassembling,  Next: Profiling,  Prev: Files,  Up: Building a mk-project project

2.4 Disassembling
=================

Here you can give the default options to pass to the debugging tools:

   + ‘nm’ options.

   + ‘gdb’ options.

   + ‘strace’ options.

   + ‘ltrace’ options.

   + ‘objdump’ options.

   + ‘ldd’ options.

   + ‘gprof’ options.


note: For further informations sea the *note mk-project code
investigating, debugging and disassembling page: 18.


File: mk-project.info,  Node: Profiling,  Next: C/C++ code formatters,  Prev: Disassembling,  Up: Building a mk-project project

2.5 Profiling
=============

* Menu:

* Oprofile::
* Valgrind::


File: mk-project.info,  Node: Oprofile,  Next: Valgrind,  Up: Profiling

2.5.1 ‘Oprofile’
----------------

‘mk-project’ use `Oprofile' version >= 1.0 for profiling you code.

You can set the following default options:

   + ‘operf’ options.

   + ‘ocount’ options.

   + ‘opreport’ options.

   + ‘opannotate’ options.

   + ‘opgprof’ options.


File: mk-project.info,  Node: Valgrind,  Prev: Oprofile,  Up: Profiling

2.5.2 ‘Valgrind’
----------------

‘mk-project’ provides 4 ‘valgrind’ targets per default:

     make valgrind-memcheck   # Launch the valgrind memcheck tool on your binary.

     make valgrind-cachegrind # Launch the valgrind cachegrind tool on your binary.

     make valgrind-callgrind  # Launch the valgrind callgrind tool on your binary.

     make valgrind-helgrind   # Launch the valgrind helgrind tool on your binary.

For this ‘valgrind’ targets you can set the options.


note: You can define more ‘valgrind’ targets by *note editing the
template: 5.

You can give options to apply to valgrind by setting the environment
variable ‘VALGRIND_OPTS’.

`Or' by passing it like this:

     $ make valgrind-memcheck VALGRIND_MEMCHECK_OPTS=--option=value

     $ make valgrind-cachegrind VALGRIND_CACHEGRIND_OPTS=--option=value

     $ make valgrind-callgrind VALGRIND_CALLGRIND_OPTS=--option=value

     $ make valgrind-helgrind VALGRIND_HELGRIND_OPTS=--option=value


File: mk-project.info,  Node: C/C++ code formatters,  Next: Documentation,  Prev: Profiling,  Up: Building a mk-project project

2.6 `C'/`C++' code formatters
=============================

Here you can choose the code formatter(s) you want to use.

   + You can set the options to give to ‘indent’ and to ‘astyle’ for the
     ‘indent-user’ and ‘astyle-user’ target if you know this tools.


     note: But ‘mk-project’ provides a lot of pre-configurated ‘astyle’,
     ‘indent’, ‘bcpp’ targets.

      

   + You can set the ‘indentation width’ to use and wether to use
     tabulation or not during the formatting process.


note: For further information sea the page: *note mk-project code
formatters: 1d.


File: mk-project.info,  Node: Documentation,  Next: About informations,  Prev: C/C++ code formatters,  Up: Building a mk-project project

2.7 Documentation
=================

  1. Simply choose to use *note sphinx or not: b.

  2. Set the options according to your sphinx version.

  3. `Enable'/`Disable' the wanted sphinx extensions.


sphinx: This will generate a ‘Makefile’ and ‘sphinx’ specific targets.

* Menu:

* man-page::


File: mk-project.info,  Node: man-page,  Up: Documentation

2.7.1 man-page
--------------

The man page generating is separated from the documentation because they
normally

does not contains the same,

so ‘mk-project’ provides through the ‘rst2man’ tool an option

to build (using the ReST (ReStructured Text) syntax) and view a man
page.


File: mk-project.info,  Node: About informations,  Next: Others Informations,  Prev: Documentation,  Up: Building a mk-project project

2.8 About informations
======================

Here you can set some informations about your program.

   + Author(s).

   + Mail address.

   + Program URL.

   + Copyright string.


note: All this informations will generate some constant definition into
the ‘./headers/defines.${EXT_HDR}’ file.


File: mk-project.info,  Node: Others Informations,  Next: Licensing,  Prev: About informations,  Up: Building a mk-project project

2.9 Others Informations
=======================

   + Make options: the options to pass to ‘make’ at every call.

   + The bash location (auto-detect).

   + Compression level for the ‘pkg-\*’ targets, with which you can
     build an archive from your project.


File: mk-project.info,  Node: Licensing,  Next: * desktop file,  Prev: Others Informations,  Up: Building a mk-project project

2.10 Licensing
==============

You can edit a source code files header according to the chosen license.

And add it to every source file with the target:

‘make prepend-license’.


File: mk-project.info,  Node: * desktop file,  Next: Archiving your project,  Prev: Licensing,  Up: Building a mk-project project

2.11 *.desktop file
===================

You can build a desktop file with this boilerplate.


File: mk-project.info,  Node: Archiving your project,  Next: Summary,  Prev: * desktop file,  Up: Building a mk-project project

2.12 Archiving your project
===========================

‘mk-project’ provides many compressed archiving targets:

   + ‘zip’ archive.

   + ‘tar’ archive compressed with ‘lzma’, ‘xz’, ‘gz’, ‘bz’.

   + ‘rar’ archive.

If the wanted archive program is installed at your site.  What is not
oblige.


note: ‘mk-project’ provides through his G.U.I a: Project –> extract and
load menu item.


File: mk-project.info,  Node: Summary,  Prev: Archiving your project,  Up: Building a mk-project project

2.13 Summary
============

Last step to complete the generation of your project.

Enjoy the easiness of working with ‘mk-project’ the T.D.E Terminal
Development Environment.

* Menu:

* Exporting your settings::


File: mk-project.info,  Node: Exporting your settings,  Up: Summary

2.13.1 Exporting your settings
------------------------------

You can exporting your settings as a ‘mk-project’ profile.

To load it by the next project because typing all this options can be
painful.

You will get the most wanted settings setted like ‘nm_options’ per
example,

but not all like the program name.


warning: The file extension will arbitrary set to ‘*.mkpp’.


File: mk-project.info,  Node: Working on an existing mk-project project,  Next: mk-project documentation,  Prev: Building a mk-project project,  Up: Top

3 Working on an existing ‘mk-project’ project
*********************************************

* Menu:

* Open an mk-project project::
* Reconfiguring an existing project::
* Adding files to your project::


File: mk-project.info,  Node: Open an mk-project project,  Next: Reconfiguring an existing project,  Up: Working on an existing mk-project project

3.1 Open an ‘mk-project’ project
================================

For opening an existing project you can make use of the ‘*.mkp’ file
from your project.

   + Either by calling ‘mk-project’ with the ‘*.mkp’ file given as
     argument:

          $ mk-project /path/to/project_folder/prgname.mkp

     Or open the project within ‘mk-project’’s G.U.I (Projects ‣ Load
     project).

   + By using your file manager:

     Simply click on the ‘*.mkp’ file in the project folder

     `or'

     Opening the ‘*.mkp’ file with your file manager using the ‘open
     with’ option.

     To open the ‘mk-project’ G.U.I and loading the entire project.

   + Using the ‘mk-project’ G.U.I:

     Use the menu item Projects ‣ Load project and choose the ‘*.mkp’ of
     interest.

     To load the entire project in the ‘mk-project’ G.U.I

All targets will be available according to your settings.

     Note: Else you can simply use a terminal to use the ‘mk-project’
     projects:

     simply type ‘make help’ in the project folder to sea the available
     targets.


File: mk-project.info,  Node: Reconfiguring an existing project,  Next: Adding files to your project,  Prev: Open an mk-project project,  Up: Working on an existing mk-project project

3.2 Reconfiguring an existing project
=====================================

Open the ‘mk-project’ G.U.I and use the menu item Projects ->
Reconfigure project

to open the project reconfiguring project interface.

Here you can:

   + `Change' some settings of your project.

   + `Enable' or `disable' some features.

   + `Edit' the Licensing boilerplate to prepend it to all source and
     header files if you want to do so.

   + `Edit' the desktop file boilerplate.


File: mk-project.info,  Node: Adding files to your project,  Prev: Reconfiguring an existing project,  Up: Working on an existing mk-project project

3.3 Adding files to your project
================================

Open an existing project and then use the menu item Projects -> Add
file(s) to project.

Then select the file(s) you want to add to your project.

     Note: Take care of the checkbutton in the file chooser !

        + You can choose to add the corresponding `header' file to your
          project.


          note: If the header file doesn’t exist it will be create.

     Warning: The file(s) must be in the ‘./src’ folder or subfolders
     from it !

     Take care to organize your project properly so that all source
     files still in the ‘./src’ folder from your project !

     Else you can add the file(s) to your project anyway but this can
     break your project tree if you rename the project folder.


     note: It’s better to create sub-folders from the ‘./src’ folder to
     organize your project properly !


File: mk-project.info,  Node: mk-project documentation,  Next: mk-project code investigating debugging and disassembling,  Prev: Working on an existing mk-project project,  Up: Top

4 ‘mk-project’ documentation
****************************

* Menu:

* Introduction::
* You are a sphinx user;: You are a sphinx user.
* You aren't a sphinx user::
* mk-project documentation visualize::
* mk-project slots::
* rst2man::


File: mk-project.info,  Node: Introduction,  Next: You are a sphinx user,  Up: mk-project documentation

4.1 Introduction
================

‘mk-project’ currently support only one single documentation generator:
‘sphinx’.

sphinx was first design to generate official python documentation but
time has past and ‘sphinx’

has become very popular at first by the python community.

Without any particular extension (like autodoc) ‘sphinx’ is based on the
R.e.S.T Re Structured Text(1) language but Mardown(2) can be used
through modifying the ‘conf.py’ file.

The Rest language is an easy markup language as like markdown but it is
standardized (Markdown not) and can be extented what sphinx does.


note: Some R.e.S.T Re Structured Text(3) extension permit to build `C'
andf `C++' documentation without using any extension.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/user/rst/quickref.html

   (2) http://markdown-syntax.html

   (3) http://docutils.sourceforge.net/docs/user/rst/quickref.html


File: mk-project.info,  Node: You are a sphinx user,  Next: You aren't a sphinx user,  Prev: Introduction,  Up: mk-project documentation

4.2 You are a sphinx user:
==========================

So everything is are right.


File: mk-project.info,  Node: You aren't a sphinx user,  Next: mk-project documentation visualize,  Prev: You are a sphinx user,  Up: mk-project documentation

4.3 You aren’t a sphinx user
============================

Let me convince you to adopt sphinx by learning the easy markup R.e.S.T
Re Structured Text(1) or Markdown(2) language.

For generating documentation in many formats, ‘mk-project’ generate make
targets from the make output according which sphinx extension are
installed on your system.

Per exemple currently on my system.

     make sphinx-html # to make standalone HTML files

     make sphinx-dirhtml # to make HTML files named index.html in directories

     make sphinx-singlehtml # to make a single large HTML file

     make sphinx-pickle # to make pickle files

     make sphinx-json # to make JSON files

     make sphinx-htmlhelp # to make HTML files and an HTML help project

     make sphinx-qthelp # to make HTML files and a qthelp project

     make sphinx-applehelp # to make an Apple Help Book

     make sphinx-devhelp # to make HTML files and a Devhelp project

     make sphinx-epub # to make an epub

     make sphinx-epub3 # to make an epub3

     make sphinx-latex # to make LaTeX files, you can set PAPER=a4 or PAPER=letter

     make sphinx-latexpdf # to make LaTeX files and run them through pdflatex

     make sphinx-latexpdfja # to make LaTeX files and run them through platex/dvipdfmx

     make sphinx-lualatexpdf # to make LaTeX files and run them through lualatex

     make sphinx-xelatexpdf # to make LaTeX files and run them through xelatex

     make sphinx-text # to make text files

     make sphinx-man # to make manual pages

     make sphinx-texinfo # to make Texinfo files

     make sphinx-info # to make Texinfo files and run them through makeinfo

     make sphinx-gettext # to make PO message catalogs

     make sphinx-changes # to make an overview of all changed/added/deprecated items

     make sphinx-xml # to make Docutils-native XML files

     make sphinx-pseudoxml # to make pseudoxml-XML files for display purposes

     make sphinx-linkcheck # to check all external links for integrity

     make sphinx-doctest # to run all doctests embedded in the documentation (if enabled)

     make sphinx-coverage # to run coverage check of the documentation (if enabled)

   + Many themes are available.

   + Many contrib packages are available for extending sphinx in many
     ways.

   + The rdt (Read The Doc) theme provide a web service, format the
     output in his theme and provide the documentation downloadable in
     many format.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/docs/user/rst/quickref.html

   (2) http://markdown-syntax.html


File: mk-project.info,  Node: mk-project documentation visualize,  Next: mk-project slots,  Prev: You aren't a sphinx user,  Up: mk-project documentation

4.4 ‘mk-project’ documentation visualize
========================================

‘mk-project’ permit you to visualize all the output files in different
manners:

‘mk-project’ will search severals documentation viewer programs on your
installation.

     Note: 
        * The ‘make’ varibale ‘${BROWSER}’ will link to your ‘browser’.

        * The ‘make’ variable ‘{INFO}’ will link to the ‘info’ program.

        * The ‘make’ variable ‘{MAN}’ will link to the ‘man’ program.

        * The ‘make’ variable ‘{EPUB}’ will link to your ‘epub’ viewer
          (‘fbreader’ or ‘okular’) if available.

        * The ‘make’ variable ‘{PDF}’ will link to your ‘pdf’ viewer if
          available.


     note: If ‘mk-project’ doesn’t find a binary for viewing a file it
     will use the ‘xdg-open’ program as fallback.

     Warning: The ‘sphinx-show-\*’ targets are set `arbitrary'

     `as best as I can'

     because their is either `no' way to know into which ‘sub-folder’
     the `documentation' will be `generate'

     and `nor' the `filename the documentation will have'...

     Simply `trust me' or correct it `yourself' if necessary.


File: mk-project.info,  Node: mk-project slots,  Next: rst2man,  Prev: mk-project documentation visualize,  Up: mk-project documentation

4.5 ‘mk-project’ slots
======================

Always remember that you can write some ‘make’ targets into the
‘mk-project’ Makefile.

To ease you the documentation generating process and so *note extend
mk-project: 5.

Per example by the first version of mk-project, it use a mix of:

   * The ‘pandoc’ package.

   * The ‘python(3)-docutils’ and the ‘rst2pdf’ packages.

   * The ‘texinfo’ and ‘texlive’ packages.

To provide ReST, Markdown and texinfo documentation generation but Only
one page per output format.

`but' I used ‘sphinx’ to write the documentation of the version 1.0 of
‘mk-project’

with some few self -builded targets like this:

     ################################################################################

     # sphinx slot.

     .PHONY: sphinx-singlehtml sphinx-html sphinx-htmlhelp sphinx-epub sphinx-info sphinx-man

     # sphinx Makefile singlehtml target link.
     sphinx-singlehtml:
           cd sphinx_doc ; ${MAKE} singlehtml ;

     # sphinx Makefile html target link.
     sphinx-html:
           cd sphinx_doc ; ${MAKE} html ;

     # sphinx Makefile epub target link.
     sphinx-epub:
           cd sphinx_doc ; ${MAKE} epub ;

     # sphinx Makefile info target link.
     sphinx-info:
           cd sphinx_doc ; ${MAKE} info ;

     # sphinx Makefile man target link.
     sphinx-man:
           cd sphinx_doc ; ${MAKE} man ;

     # sphinx Makefile doctest target link.
     sphinx-doctest:
           cd sphinx_doc ; ${MAKE} doctest


     # sphinx builded files showing targets.
     .PHONY: sphinx-show-singlehtml sphinx-show-html sphinx-show-epub sphinx-show-info sphinx-show-man

     sphinx-show-singlehtml:
           cd ./sphinx_doc/build/singlehtml ; ${BROWSER} index.html ;

     sphinx-show-html:
           cd ./sphinx_doc/build/html ; ${BROWSER} index.html ;

     sphinx-show-epub:
           cd ./sphinx_doc/build/epub  ; ${EPUB} *.epub ;

     sphinx-show-info:
           cd ./sphinx_doc/build/texinfo ; ${INFO} -f *.info ;

     sphinx-show-man:
           cd ./sphinx_doc/build/man ; ${MAN} -f ${PRGNAME}.${MAN_LEVEL} ;

     # sphinx clean target.
     sphinx-clean:
           cd sphinx_doc ; cd build ; rm -R * ;

     ################################################################################


File: mk-project.info,  Node: rst2man,  Prev: mk-project slots,  Up: mk-project documentation

4.6 ‘rst2man’
=============

If you get the program ‘rst2man’ installed on your system,

‘mk-project’ will create a folder named ‘rst2man’ into the project tree
into

which you will find a file ‘${PRGNAME}.rst’ to edit a man-page with
‘rst2man’.


warning: Because the man-page is often apart from the documentation.


File: mk-project.info,  Node: mk-project code investigating debugging and disassembling,  Next: mk-project code formatters,  Prev: mk-project documentation,  Up: Top

5 ‘mk-project’ code investigating, debugging and disassembling
**************************************************************

* Menu:

* Introduction: Introduction<2>.
* The make info target::
* The make gdb target::
* The make ldd target::
* The make nm target::
* The make objdump target::
* The make strace target::
* The make ltrace target::
* The make strip target::
* Oprofile targets::
* Valgrind targets::
* Alternative to *_OPTS::
* Documentation Source::


File: mk-project.info,  Node: Introduction<2>,  Next: The make info target,  Up: mk-project code investigating debugging and disassembling

5.1 Introduction
================

You want to investigate in deep your binary cause of it bugs or simply
per curiosity.

‘mk-project’ provide a lot of targets which will make your investigation
easier.


File: mk-project.info,  Node: The make info target,  Next: The make gdb target,  Prev: Introduction<2>,  Up: mk-project code investigating debugging and disassembling

5.2 The ‘make info’ target
==========================

The ‘make info’ target display simple informations about your program.

Using the ‘file’, ‘size’, ‘ls -s -h’ utilities.

* Menu:

* The file utility::
* The size utility::


File: mk-project.info,  Node: The file utility,  Next: The size utility,  Up: The make info target

5.2.1 The ‘file’ utility
------------------------

The ‘file’ utility print out the details about any file-type.

So if an executable file is given, the ‘file’ utility will display
informations about it.


File: mk-project.info,  Node: The size utility,  Prev: The file utility,  Up: The make info target

5.2.2 The ‘size’ utility
------------------------

The ‘size’ utility print out the byte length of the main binary
components:

‘.text’, ‘.data’ and ‘.bss’.


File: mk-project.info,  Node: The make gdb target,  Next: The make ldd target,  Prev: The make info target,  Up: mk-project code investigating debugging and disassembling

5.3 The ‘make gdb’ target
=========================

At first you can use the famous ‘GNU/Debugger’ ‘gdb’ for investigating
your program,

by simply launching the target ‘make gdb’.

This will launch ‘gdb’ in the `./bin' folder where your binary is
located

with your program as argument.

     Note: Given options to ‘gdb’:

     For given supplementary options to gdb, which will be passed to
     ‘gdb’ at every target call, edit the ‘GDB_OPTS’ variable.

     Else if you want to change the options for a unique call of ‘gdb’,
     by using the target.

     Simply set the wanted options into the ‘GDB_OPTS’ variable on the
     command line:

          $ make gdb GDB_OPTS="--option value"


File: mk-project.info,  Node: The make ldd target,  Next: The make nm target,  Prev: The make gdb target,  Up: mk-project code investigating debugging and disassembling

5.4 The ‘make ldd’ target
=========================

The ‘ldd’ utility show the complete list of dynamic libraries which your
program will try to load (i.e.  `The load time dependencies').

     Note: Given options to ‘ldd’:

     For given supplementary options to ‘ldd’, which will be passed to
     ‘ldd’ at every target call, edit the ‘LDD_OPTS’ variable.

     Else if you want to change the options for a unique call of ‘ldd’,
     by using the target.

     Simply set the wanted options into the ‘LDD_OPTS’ variable on the
     command line:

          $ make ldd LDD_OPTS="--option value"

     Warning: Limitations of ldd:

        * ‘ldd’ cannot identify the libraries dynamically loaded at
          runtime using ‘dlopen()’.

          Be aware, however, that in some circumstances, some version of ldd may attempt to obtain the dependencies informations
          by directly executing the program. Thus, you should never employ ldd on untrusted executables,
          since this may result in the execution of arbitrary code.

     A safer alternative when dealing with untrusted executables is
     following:

          $ objdump -p /path/to/binary | grep NEEDED

          # The same result result can be achieve using the readelf utility.

          $ readelf -d /path/to/binary | grep NEEDED


File: mk-project.info,  Node: The make nm target,  Next: The make objdump target,  Prev: The make ldd target,  Up: mk-project code investigating debugging and disassembling

5.5 The ‘make nm’ target
========================

The ‘nm’ utility is used to list the symbols of a binary or object
file(s).

It can also find the indicated symbol type.

     Note: Given options to ‘nm’:

     For given supplementary options to ‘nm’, which will be passed to
     ‘nm’ at every target call, edit the ‘NM_OPTS’ variable.

     Else if you want to change the options for a unique call of ‘nm’,
     by using the target.

     Simply set the wanted options into the ‘NM_OPTS’ variable on the
     command line:

          $ make nm NM_OPTS="--option value"


note: You can give the ‘$(OBJECT)’ ‘make’ variable as argument to ‘nm’
instead of the binary.

     Note: If the binary contains some `C++' code, the symbols are
     printed by default in mangled form.

Usage examples:

     $ nm /path/to/prg

     # List all symbols of prg (a binary or object file(s)).

     $ nm -D /path/to/prg

     # List only the symbols contains into the dynamic section(s) (exported or visible).

     $ nm -C /path/to/prg

     # List symbols in demangled form.

     $ nm -D --no-demangle /path/to/prg

     # List symbols in not demangled form.

     $ nm -u /path/to/prg

     # List undefined symbols.

Look at The 20 best nm commands(1)

   ---------- Footnotes ----------

   (1) http://www.thegeekstuff.com/2012/03/linux-nm-command


File: mk-project.info,  Node: The make objdump target,  Next: The make strace target,  Prev: The make nm target,  Up: mk-project code investigating debugging and disassembling

5.6 The ‘make objdump’ target
=============================

‘objdump’ is one of the most versatile utility program, so it can
support about 50 others binary formats other than the ELF format.

     Note: Given options to ‘objdump’:

     For given supplementary options to ‘objdump’, which will be passed
     to ‘objdump’ at every target call, edit the ‘OBJDUMP_OPTS’
     variable.

     Else if you want to change the options for a unique call of
     ‘objdump’, by using the target.

     Simply set the wanted options into the ‘OBJDUMP_OPTS’ variable on
     the command line:

          $ make objdump OBJDUMP_OPTS="--option value"


note: You can give the ‘$(OBJECT)’ ‘make’ variable as argument to
‘objdump’ instead of the binary.

Usage examples:

     $ objdump -f /path/to/prg

     # Is used to obtain an insight into the object file(s) header.
     # The header provide plenty of informations like
     #
     # * binary type
     # * entry point (The start of the .text section)
     # * etc..

     $ objdump -h /path/to/prg

     # Is used to list the available sections from the prg.

     $ objdump -T /path/to/prg

     # List dynamic symbols only.

     # Is equivalent to running: $ nm -D /path/to/prg

     $ objdump -t /path/to/prg

     # Examines the dynamic section(s).

     $ objdump -R /path/to/prg

     # Examines the relocation section(s).

     $ objdump -S -j <section name> /path/to/prg

     # Provide the hex-dump of the values carried by the given section.

     $ objdump -p /path/to/prg

     # Display informations about the ELF binary segments.

Usage example for code disassembling using ‘objdump’:

     $ objdump -d -M intel /path/to/prg

     # Used to disassemble a binary using the Intel syntax.

     $ objdump -d -S -M intel /path/to/prg

     # Like above but interspercing the original source code.

     $ objdump -d -M intel -j <section name> /path/to/prg

     # This only works if the binary is compiled with the -g (debugging) option.


File: mk-project.info,  Node: The make strace target,  Next: The make ltrace target,  Prev: The make objdump target,  Up: mk-project code investigating debugging and disassembling

5.7 The ‘make strace’ target
============================

The ‘strace’ utility tracks down the `system calls' made by the
`process' as well as the `signals' received by the `process'.

     Note: Given options to ‘strace’:

     For given supplementary options to strace, which will be passed to
     ‘strace’ at every target call, edit the ‘STRACE_OPTS’ variable.

     Else if you want to change the options for a unique call of
     ‘strace’, by using the target.

     Simply set the wanted options into the ‘STRACE_OPTS’ variable on
     the command line:

          $ make strace STRACE_OPTS="--option value"


File: mk-project.info,  Node: The make ltrace target,  Next: The make strip target,  Prev: The make strace target,  Up: mk-project code investigating debugging and disassembling

5.8 The ‘make ltrace’ target
============================

The ‘ltrace’ utility tracks down the `libraries calls' made by the
`process'.

     Note: Given options to ‘ltrace’:

     For given supplementary options to ltrace, which will be passed to
     ‘ltrace’ at every target call, edit the ‘LTRACE_OPTS’ variable.

     Else if you want to change the options for a unique call of
     ‘ltrace’, by using the target.

     Simply set the wanted options into the ‘LTRACE_OPTS’ variable on
     the command line:

          $ make ltrace LTRACE_OPTS="--option value"


File: mk-project.info,  Node: The make strip target,  Next: Oprofile targets,  Prev: The make ltrace target,  Up: mk-project code investigating debugging and disassembling

5.9 The ‘make strip’ target
===========================

The ‘strip’ utility can be used to eliminated all the symbols not needed
in the process.

     Note: Given options to ‘strip’:

     For given supplementary options to strip, which will be passed to
     ‘strip’ at every target call, edit the ‘STRIP_OPTS’ variable.

     Else if you want to change the options for a unique call of
     ‘strip’, by using the target.

     Simply set the wanted options into the ‘STRIP_OPTS’ variable on the
     command line:

          $ make strip STRIP_OPTS="--option value"


File: mk-project.info,  Node: Oprofile targets,  Next: Valgrind targets,  Prev: The make strip target,  Up: mk-project code investigating debugging and disassembling

5.10 Oprofile targets
=====================

The program collection Oprofile is a profiling system for systems
running Linux 2.6.31 and greater.

OProfile makes use of the hardware performance counters provided on
Intel, AMD, and other processors.

OProfile can profile a selected program or process or the whole system.

OProfile can also be used to collect cumulative event counts at the
application, process, or system level.

Begin to show at:

          $ man Oprofile

          $ ophelp

‘ophelp’ lists the available performance counter options.

If you give it a symbolic event name, it will return the hardware value
(e.g.  "ophelp DATA_MEM_REFS").


note: ‘mk-project’ use the version >= 1.0 of Oprofile.

And the available Oprofile programs are:

   * ‘operf’

   * ‘ocount’

   * ‘opreport’

   * ‘opannotate’

   * ‘oparchive’

   * ‘opgprof’

‘mk-project’ provides wrapper around this programs except ‘oparchive’.

Simply remember that operf and ‘ocount’ generate a
‘profile_specification’.

And the other are done to interpret the datas.


warning: You must run this programs as root.


File: mk-project.info,  Node: Valgrind targets,  Next: Alternative to *_OPTS,  Prev: Oprofile targets,  Up: mk-project code investigating debugging and disassembling

5.11 Valgrind targets
=====================

If valgrind is present on your system ‘mk-project’ provide you 4 targets
for the most common usage of valgrind:

     make valgrind-memcheck   # Launch the valgrind memcheck tool on your binary.

     make valgrind-cachegrind # Launch the valgrind cachegrind tool on your binary.

     make valgrind-callgrind  # Launch the valgrind callgrind tool on your binary.

     make valgrind-helgrind   # Launch the valgrind helgrind tool on your binary.

For every target you can set at creating the project or changing at
reconfiguring your project the wanted options.

     Note: Fell free *note to edit the template to set your prefered
     options in hard coded: 5.

     Or set the environment variable ‘$VALGRIND_OPTS’.


File: mk-project.info,  Node: Alternative to *_OPTS,  Next: Documentation Source,  Prev: Valgrind targets,  Up: mk-project code investigating debugging and disassembling

5.12 Alternative to *_OPTS
==========================


note: You can `export' ‘*_OPTS’ the corresponding variable before
launching the ‘make’ target.


File: mk-project.info,  Node: Documentation Source,  Prev: Alternative to *_OPTS,  Up: mk-project code investigating debugging and disassembling

5.13 Documentation Source
=========================

   + ‘GNU Make manual’ (A very good manual from the GNU manuals serie).


authors: Stallman, McGrath, Smith.

   + ‘C/C++ Compiling’ (A very good book about libraries and machine
     code investigation).


author: Milan Stevanovic.


File: mk-project.info,  Node: mk-project code formatters,  Next: mk-project contributing advices,  Prev: mk-project code investigating debugging and disassembling,  Up: Top

6 `mk-project' code formatters
******************************

* Menu:

* Introduction: Introduction<3>.
* Using the indent utility::
* Using the astyle utility::


File: mk-project.info,  Node: Introduction<3>,  Next: Using the indent utility,  Up: mk-project code formatters

6.1 Introduction
================

`mk-project' provide severals utilities with many predefined targets for
formatting your source code.

* Menu:

* For C or C++ source code;: For C or C++ source code.


File: mk-project.info,  Node: For C or C++ source code,  Up: Introduction<3>

6.1.1 For `C' or `C++' source code:
-----------------------------------

   * ‘indent’

   * ‘astyle’

   * ‘bcpp’


File: mk-project.info,  Node: Using the indent utility,  Next: Using the astyle utility,  Prev: Introduction<3>,  Up: mk-project code formatters

6.2 Using the ‘indent’ utility
==============================

`mk-project' provide following predefined indent styles:

     make indent-kr    # Format all source files in the kr style.
     make indent-gnu   # Format all source files in the gnu style.
     make indent-linux # Format all source files in the linux style.
     make indent-orig  # Format all source files in the original style.
     make indent-user  # Format all source files in the user defined style.

     make indent-clean # Remove all formatted files with suffix.


note: The ‘indent-user’ target use the given options during the project
configuration for formatting your source code.

     Note: By launching any code formatting target `mk-project' will
     output a copy of all your source files suffixed with the
     corresponding target name:

     Per example by using the ‘indent-kr’ target a file named ‘main.c’
     will ouput as ‘main-kr.c’.

     For overwriting your source files really you must set the ‘make’
     variable ‘OVERWRITE’ on the value `T'.

          $ make indent-kr OVERWRITE=T


File: mk-project.info,  Node: Using the astyle utility,  Prev: Using the indent utility,  Up: mk-project code formatters

6.3 Using the ‘astyle’ utility
==============================

`mk-project' provide following predefined indent styles:

     make astyle-ansi          # Format all source files in the ansi style.
     make astyle-java          # Format all source files in the java style.
     make astyle-kr            # Format all source files in the kr style.
     make astyle-stroustrup    # Format all source files in the stroustrup style.
     make astyle-whitesmith    # Format all source files in the whitesmith style.
     make astyle-banner        # Format all source files in the banner style.
     make astyle-gnu           # Format all source files in the gnu style.
     make astyle-linux         # Format all source files in the linux style.
     make astyle-horstmann     # Format all source files in the horstmann style.
     make astyle-lisp          # Format all source files in the lisp style.
     make astyle-pico          # Format all source files in the pico style.
     make astyle-python        # Format all source files in the python style.
     make astyle-user          # Format all source files in the user defined style.

     make astyle-clean         # Remove all formatted files with suffix.


note: The ‘astyle-user’ target use the given options during the project
configuration for formatting your source code.

     Note: By launching any code formatting target `mk-project' will
     output a copy of all your source files suffixed with the
     corresponding target name:

     Per example by using the ‘astyle-kr’ target a file named ‘main.c’
     will ouput as ‘main-kr.c’.

     For overwriting your source files really you must set the ‘make’
     variable ‘OVERWRITE’ on the value `T'.

          $ make astyle-kr OVERWRITE=T


File: mk-project.info,  Node: mk-project contributing advices,  Next: * todo or * tdo file format specifications,  Prev: mk-project code formatters,  Up: Top

7 ‘mk-project’ contributing advices
***********************************

* Menu:

* mk-project zen::
* How contibute ?::
* Makefile: Makefile<2>.
* code formatters::


File: mk-project.info,  Node: mk-project zen,  Next: How contibute ?,  Up: mk-project contributing advices

7.1 mk-project zen
==================

     mk-project zen is simple:

          The minimum work for the user.

          The maximum configuration possiblities.

          + Minimum informations asking to the user, maximum deduced.

          + Maximum possibilities, with a minimum informations and binaries.

          Bring the maximum with the minimum.

          ! No package is obligatory except the coreutils
            and them needed by the programming language.


File: mk-project.info,  Node: How contibute ?,  Next: Makefile<2>,  Prev: mk-project zen,  Up: mk-project contributing advices

7.2 How contibute ?
===================

     Write a project for a programming language which isn’t done, or
     enhance one.

     Write some useful ‘make’ targets for any purpose you want.

     Write ‘make’ targets forn your well know documentation generators,
     for ‘mk-project’.

     Every help is welcome, thanks.

* Menu:

* For writing a new project;: For writing a new project.
* Makefile::
* Scripting::
* Becoming::
* NOTES::


File: mk-project.info,  Node: For writing a new project,  Next: Makefile,  Up: How contibute ?

7.2.1 For writing a new project:
--------------------------------

       1. Simply fork the project.

       2. Make a folder named ‘lang_mk-project’ (per example:
          perl_mk-project).

       3. Put your stuff inside this folder.

       4. And ask for merging.

     After your submission your project will be a mimimum tested and
     they is no matter of refusement only enhancement.


File: mk-project.info,  Node: Makefile,  Next: Scripting,  Prev: For writing a new project,  Up: How contibute ?

7.2.2 Makefile
--------------

     You can take the included makefiles (‘./.SubMakefiles/*.mk’)

     To put it into your project, this is highly recommanded, `don’t
     reinvent the wheel'.

     We want targets for:

        - Executing the source.

        - debugging the source.

        - profiling the source.

        - And what you want else...


File: mk-project.info,  Node: Scripting,  Next: Becoming,  Prev: Makefile,  Up: How contibute ?

7.2.3 Scripting
---------------

     We script into `bash' or `python' (the script must be compatible
     with `python2' and `python3').

     Or if your project is about a scripting language you can use this
     language.


     warning: Think to modify the script ‘prepend_license.py’ to adapt
     the comment sign from your language

          It's easy even if you don't know python or

          in the worse case i will do this for you.

     Scripts are set into the ‘./.scripts’ folder.


File: mk-project.info,  Node: Becoming,  Next: NOTES,  Prev: Scripting,  Up: How contibute ?

7.2.4 Becoming
--------------

     If you create a `Makefile' project you become a `coauthor' of
     ‘mk-project’

     If you enhance a project you become a `contributor' of ‘mk-project’

     So if you submit a project for your well know language(s),

     you will take first the benefit to get a `Project done' for `your
     programming language'.

     And the proudness to contribute to ‘mk-project’


     note: I will ensure the updating of the GUI at every new project
     adding.


File: mk-project.info,  Node: NOTES,  Prev: Becoming,  Up: How contibute ?

7.2.5 NOTES
-----------

     If you write the Makefile for your language, think at writing a
     minimal example project who writes

     ‘hello world welcome to mk-project’

     on ‘stdout’.

     You can enhance your project with everything you want like the
     debugging definition in the C/C++ language,

     and write entire module(s) for the project purpose.


File: mk-project.info,  Node: Makefile<2>,  Next: code formatters,  Prev: How contibute ?,  Up: mk-project contributing advices

7.3 Makefile
============

* Menu:

* BINARIES::
* VARIABLES::
* Files: Files<2>.
* FILES and FILEPATH::
* LIBRARIES::
* TARGETS::
* ADVICES::


File: mk-project.info,  Node: BINARIES,  Next: VARIABLES,  Up: Makefile<2>

7.3.1 BINARIES
--------------

        - Verify the presence of the binary using the function
          `BINARY_EXIST'.

        - `UPPERCASE' the binary variable name for no confusion.

               BINARY = ${call BINARY_EXIST, binary}

        - test if binary installed with:

               # Compare the ${BINARY} variable with an empty string.
               ifneq (${BINARY}, )
               # do work...
               endif


     note: Binaries test are in file ‘./.SubMakefiles/binary_checks.mk’


File: mk-project.info,  Node: VARIABLES,  Next: Files<2>,  Prev: BINARIES,  Up: Makefile<2>

7.3.2 VARIABLES
---------------

        - Make the same for configuration:

             - use `T' for `TRUE'

             - use `F' for `FALSE'

               # No comment on following line and remove trailing spaces.
               OVERWRITE = T

               # Compare the ${OVERWRITE} variable with T (don't insert  a space).
               ifeq (${OVERWRITE},T)
               # Do work...
               else
               # Do work...
               endif

          The configuration options set or select by the user must be at
          the top of the Makefile,

          with a default value.

          And you must inform me about in the goal to update the GUI
          properly.

        - Use the assigments operators cleverly:

               # define var     value  # Value definition (used for multiline).
               # define var =   value  # indirect. (the value change at the next assignment for the final variable value.)
               # define var :=  value  # direct.   (the value doesn't change at the next assignment for the final variable value.)
               # define var ::= value  # retro and inter compatibility with other make tools.
               # define var +=  value  # increment assignment operator.
               # define var ?=  value  # shell expansion operator.

        - Use the increment operator ( `+=' ) cleverly so that the user
          can define the variable on the command-line.

               USE_TABS += -t

          Or `not':

                  override MY_VAR = value

               #


     note: Take care by inserting comments some settings doesn’t support
     comments on the same line as the variable.


File: mk-project.info,  Node: Files<2>,  Next: FILES and FILEPATH,  Prev: VARIABLES,  Up: Makefile<2>

7.3.3 Files
-----------

     You can verify if a file exist or if it’s generated by using the
     function `FILE_EXIST'

          MY_FILE = ${call FILE_EXIST, /path/to/my_file.ext}

     It will return `T' (TRUE) or `F' (FALSE) if the file exist or not.


File: mk-project.info,  Node: FILES and FILEPATH,  Next: LIBRARIES,  Prev: Files<2>,  Up: Makefile<2>

7.3.4 FILES and FILEPATH
------------------------

        - First define all path relativ, included Makefiles are at the
          same position as the main Makefile.

        - Define a variable for the `FILEPATH' and for the `FILE'.

               MY_FILEPATH = ./filepath/...

               MY_FILE = ${MY_FILEPATH}/my_file.txt

          We construct the filepath relativ to the main Makefile:
          (./Makefile)


     note: Filepath are defined in file ‘./.SubMakefiles/path.mk’

        - You can (not obligatory) put the extension in a variable, if
          this make sens.

               EXT_TYPE = .type

               MY_FILE = ${MY_FILEPATH}/${FILE}${EXT_TYPE}

        - You can use the make function `FILE_EXIST' to verify the
          presence of a file.

               MY_FILE = ${call FILE_EXIST, my_file}


     note: The included Makefiles are correctly named and end in the
     extension *.mk so that an editor can reconize them.


     note: The included Makefiles are set in the SubMakefiles folder.


File: mk-project.info,  Node: LIBRARIES,  Next: TARGETS,  Prev: FILES and FILEPATH,  Up: Makefile<2>

7.3.5 LIBRARIES
---------------

     Today most of the libraries use the program ‘pkg-config’ which you
     can use to auto-detect the

     presence of a library.

     By using the `PKG_CONFIG_EXIST' function.

          HAS_LIB_PC =  ${call PKG_CONFIG_EXIST, thelibpc}

     It will return `T' (TRUE) or `F' (FALSE) in relationship of the
     presence of a *.pc file for ‘thelibpc’.


File: mk-project.info,  Node: TARGETS,  Next: ADVICES,  Prev: LIBRARIES,  Up: Makefile<2>

7.3.6 TARGETS
-------------

     If you need to compose some targets names from more than a word,
     separate them by:

        - A `’-’' (`minus') if it’s a `user-target'.

        - A `’_’' (`underscore') if it’s an `intern_target'.

          Which can be put together with others intern targets to form a
          `user-target'.


     note: Don’t forget the ‘.PHONY:’ definition if the target has no
     depdending targets.


File: mk-project.info,  Node: ADVICES,  Prev: TARGETS,  Up: Makefile<2>

7.3.7 ADVICES
-------------

     `IMPORTANT:' make doesn’t support trailing spaces, so strip them.

     You can use the following command

          $ sed -i 's/[[:space:]]$//' filepath


File: mk-project.info,  Node: code formatters,  Prev: Makefile<2>,  Up: mk-project contributing advices

7.4 code formatters
===================

     We can make usages of following utilities, for code formatting in
     severals languages:

* Menu:

* C::
* C++::
* HTML::
* CSS::
* Javascipt::
* Perl::
* PHP::
* Ruby::
* XML::
* Using a code formatter::


File: mk-project.info,  Node: C,  Next: C++,  Up: code formatters

7.4.1 C
-------

        + ‘indent’ (checked).

        + ‘astyle’ (checked).

        + ‘bcpp’ (checked).

        + ‘uncrustify’ (not check, help me !).


File: mk-project.info,  Node: C++,  Next: HTML,  Prev: C,  Up: code formatters

7.4.2 C++
---------

        + ‘indent’ (checked).

        + ‘astyle’ (checked).

        + ‘bcpp’ (checked).

        + ‘uncrustify’ (not check, help me !).


note: Must check if we can use this scripts by the ‘universalindentgui’
authors or the tools author(s).


File: mk-project.info,  Node: HTML,  Next: CSS,  Prev: C++,  Up: code formatters

7.4.3 HTML
----------

        + ‘tidy’ (not checked).


File: mk-project.info,  Node: CSS,  Next: Javascipt,  Prev: HTML,  Up: code formatters

7.4.4 CSS
---------

        + ‘csstidy’ (not checked).


File: mk-project.info,  Node: Javascipt,  Next: Perl,  Prev: CSS,  Up: code formatters

7.4.5 Javascipt
---------------

        + ‘JsDecoder.js’ (not checked).


note: Must check if we can use this scripts by the ‘universalindentgui’
authors or the tools author(s).


File: mk-project.info,  Node: Perl,  Next: PHP,  Prev: Javascipt,  Up: code formatters

7.4.6 Perl
----------

        + ‘perltidy’ (not checked).


File: mk-project.info,  Node: PHP,  Next: Ruby,  Prev: Perl,  Up: code formatters

7.4.7 PHP
---------

        + ‘phpStylist.php’ (not checked).


note: Must check if we can use this scripts by the ‘universalindentgui’
authors or the tools author(s).


File: mk-project.info,  Node: Ruby,  Next: XML,  Prev: PHP,  Up: code formatters

7.4.8 Ruby
----------

        + ‘rbeautify.rb’ (not checked).

        + ‘ruby_formatter.rb’ (not checked).


note: Must check if we can use this scripts by the ‘universalindentgui’
authors or the tools author(s).


File: mk-project.info,  Node: XML,  Next: Using a code formatter,  Prev: Ruby,  Up: code formatters

7.4.9 XML
---------

        + ‘xmlindent’ (not checked).


File: mk-project.info,  Node: Using a code formatter,  Prev: XML,  Up: code formatters

7.4.10 Using a code formatter
-----------------------------

     The usage of a code formatter must be user defined controlled so
     that:

       1. We ask the user if he wants to use it.

       2. We make his usage conditionnaly in the corresponding Makefile:
          ‘./.SubMakefiles/code_formatter.mk’.

          By using a variable named ‘USE_(TOOL NAME UPPERCASE)’ given
          the value:

             * `T' for ‘true’ or

             * `F' for ‘false’.

          According the user settings.


File: mk-project.info,  Node: * todo or * tdo file format specifications,  Next: About mk-project,  Prev: mk-project contributing advices,  Up: Top

8 `*.todo' or `*.tdo' file format specifications:
*************************************************

The *.todo specification give you a advice structure

of how structuring an TODO file for efficiently tasks

organizing, and so don’t forget ideas or things which

you may have to do in the future for the development

of projects of any professional fields where tasks

must be organized and be accomplished in an certain

order.

* Menu:

* Markup syntax::
* Markup Types::
* Priority_level::
* TASK_ORDER::
* Advices::
* Syntax of *.todo file(s) content: Syntax of * todo file s content.
* End word of specifications of the *.todo file(s) format: End word of specifications of the * todo file s format.
* Example of a *.todo file;: Example of a * todo file.
* License::


File: mk-project.info,  Node: Markup syntax,  Next: Markup Types,  Up: * todo or * tdo file format specifications

8.1 Markup syntax
=================

`Syntax of a mark:' ‘[UPPERCASE :Capitalize: <digits>]’

`Syntax of end mark:' ‘[/UPPERCASE] # The end mark is good for reread
his todo note.’

An entire `*.todo' file entry can be represent like this:

     =================
     TITLE OF DOCUMENT
     =================

     [TYPE :Priority_level: <TASK_ORDER>] Title of todo entry

       Todo main text...

     [/TYPE]

     [TYPE :Priority_level: <TASK_ORDER>] One line todo entry [/TYPE]


File: mk-project.info,  Node: Markup Types,  Next: Priority_level,  Prev: Markup syntax,  Up: * todo or * tdo file format specifications

8.2 Markup Types
================

`TYPE' (can be):

* Menu:

* Before complete the task;: Before complete the task.
* After complete the task;: After complete the task.
* Summary of TYPE::


File: mk-project.info,  Node: Before complete the task,  Next: After complete the task,  Up: Markup Types

8.2.1 Before complete the task:
-------------------------------

   + `BUG' (`A bug have to be fixed').

   + `FIXME' (`A problem has to be fixed').

   + `TEST' (`You have to test a feature').

   + `CORRECT' (`Something must be corrected').

   + `REDO' (`Something must be redone').

   + `COMMENT' (`You must make a comment').

   + `TODO' (`Something must be done').

   + `IDEA' (`You get an idea for something').


File: mk-project.info,  Node: After complete the task,  Next: Summary of TYPE,  Prev: Before complete the task,  Up: Markup Types

8.2.2 After complete the task:
------------------------------

   + `BUGFIX' (`The bug is fixed').

   + `FIXED' (`The problem is fixed').

   + `TESTED' (`The test is done').

   + `CORRECTED' (`The correction is done').

   + `REDONE' (`The task is rewritten').

   + `COMMENTED' (`The commenting is done').

   + `DONE' (`The task TODO is DONE').

   + `IDIE' (`The idea is complete (become true)').


File: mk-project.info,  Node: Summary of TYPE,  Prev: After complete the task,  Up: Markup Types

8.2.3 Summary of TYPE
---------------------

   + `BUG' or `BUGFIX'

   + `FIXME' or `FIXED'

   + `TEST' or `TESTED'

   + `CORRECT' or `CORRECTED'

   + `REDO' or `REDONE'

   + `COMMENT' or `COMMENTED'

   + `TODO' or `DONE'

   + `IDEA' or `IDIE'


File: mk-project.info,  Node: Priority_level,  Next: TASK_ORDER,  Prev: Markup Types,  Up: * todo or * tdo file format specifications

8.3 Priority_level
==================

`Priority_level' (can take following values:)

        + `High'

        + `Medium'

        + `Low'


File: mk-project.info,  Node: TASK_ORDER,  Next: Advices,  Prev: Priority_level,  Up: * todo or * tdo file format specifications

8.4 TASK_ORDER
==============

`TASK_ORDER' (can be)

  1. a `2' (Maybe `3' or `4') digits sequences for organizing.

  2. a digit and a `UPPERCASE' letter with meaning:

        + By `TODO', `TEST', `IDEA' entries

             - `F' -> `Free time'

             - `N' -> `Normal' (When possible)

             - `U' -> `Urgent'

        + By `CORRECT', `BUG' and `FIXME'

             - `I' -> `Info'

             - `W' -> `Warning'

             - `F' -> `Fatal'


     note: the digit(s) are zero per default but it can take a value
     between 0-9 for very organized structures.


note: This can be omit.  Only `TYPE' and `Priority_level' are mandatory.


Summary: The `TASK_ORDER' are written between ‘<’ and ‘>’.

Can be composed either of:

   * `2' digits representing the `task priority'.

   * A digit and a special mean `UPPERCASE' letter.


syntax: <[0-9][0-9|[F|N|U]|[I|W|F]]>


example: [TODO :Medium: <0F>] Make a new icon because actual is ugly !!!
[/TODO]


File: mk-project.info,  Node: Advices,  Next: Syntax of * todo file s content,  Prev: TASK_ORDER,  Up: * todo or * tdo file format specifications

8.5 Advices
===========

`*.todo' files extensibility:

  1. Every entry `TYPE' can be invented but must be written in
     `UPPERCASE'.


     advice: use only one word.  (Else use `’_’').

     `DFY' (`Don’t Forget Yourself: this make sens'),

     `DRY' (`Don’t Repeat Yourself: don’t be stupid'),

     `KISS' (`Keep It Simple Stupid: be concise').

  2. Priority level can be added as long as they are one Capitalize
     word.

  3. `DIY' (`Do It Yourself') for the `TASK_ORDER' or in order to
     maintain them ordered.


Advice: Keep terminal width max 79 chars a line.

     The Best for the End: Think at things like timestamps,

     doing order, prerequisite for task, and so soon !!!


File: mk-project.info,  Node: Syntax of * todo file s content,  Next: End word of specifications of the * todo file s format,  Prev: Advices,  Up: * todo or * tdo file format specifications

8.6 Syntax of `*.todo' file(s) content
======================================

You can use the ‘ReST’ or ‘Markdown’ syntax for the content between or
inside the marks.

* Menu:

* For Titles::
* For text decorations;: For text decorations.
* For Lists;: For Lists.
* For keywords values pairing;: For keywords values pairing.
* For links;: For links.
* For footnotes;: For footnotes.
* For comments;: For comments.
* For code text;: For code text.


File: mk-project.info,  Node: For Titles,  Next: For text decorations,  Up: Syntax of * todo file s content

8.6.1 For Titles
----------------

     ==============
     My first Title
     ==============

     ***************
     My second title
     ***************

     ##############
     My third title
     ##############

     +++++++++++++++
     My fourth title
     +++++++++++++++

     ::::::::::::::
     My fifth title
     ::::::::::::::

     --------------
     My sixth title
     --------------

     ~~~~~~~~~~~~~~~~
     My seventh title
     ~~~~~~~~~~~~~~~~


File: mk-project.info,  Node: For text decorations,  Next: For Lists,  Prev: For Titles,  Up: Syntax of * todo file s content

8.6.2 For text decorations:
---------------------------

     **bold**

     *italic*

     _underline_

     ``inline literals``

     --strike-trough--

     ^^over-line^^


File: mk-project.info,  Node: For Lists,  Next: For keywords values pairing,  Prev: For text decorations,  Up: Syntax of * todo file s content

8.6.3 For Lists:
----------------

     + List item 1

       - Sub list item 1

       - Sub list item 2

     + List item 2

       1. First numbered list item.

       2. Second numbered list item.

       3. Third numbered list item.

     + List item 3

       Definition list title

         Definition list text


File: mk-project.info,  Node: For keywords values pairing,  Next: For links,  Prev: For Lists,  Up: Syntax of * todo file s content

8.6.4 For keywords values pairing:
----------------------------------

     :author: foo bar

     :license: fdl

     :version: 1.0.0


File: mk-project.info,  Node: For links,  Next: For footnotes,  Prev: For keywords values pairing,  Up: Syntax of * todo file s content

8.6.5 For links:
----------------

     `Link text <http://www.domain.com/folder/file.html>`


File: mk-project.info,  Node: For footnotes,  Next: For comments,  Prev: For links,  Up: Syntax of * todo file s content

8.6.6 For footnotes:
--------------------

     [*] my footnote text


File: mk-project.info,  Node: For comments,  Next: For code text,  Prev: For footnotes,  Up: Syntax of * todo file s content

8.6.7 For comments:
-------------------

     # My comment line


File: mk-project.info,  Node: For code text,  Prev: For comments,  Up: Syntax of * todo file s content

8.6.8 For code text:
--------------------

     [:LANGUAGE:]

       Indented text is code !

Per example for C code:

     [:C:]

       const char *var = "value" ;


File: mk-project.info,  Node: End word of specifications of the * todo file s format,  Next: Example of a * todo file,  Prev: Syntax of * todo file s content,  Up: * todo or * tdo file format specifications

8.7 End word of specifications of the *.todo file(s) format
===========================================================

Do what you must with this specifications and take it like an TODO file

structuring advice, but this document was establish to define the

specifications of a clean TODO file.


File: mk-project.info,  Node: Example of a * todo file,  Next: License,  Prev: End word of specifications of the * todo file s format,  Up: * todo or * tdo file format specifications

8.8 Example of a *.todo file:
=============================

An example from a real *.todo file from one of my projects.

     IT-EDIT TODO:
     +++++++++++++

     [IDEA :Low:] Advertisement for it-edit:

       it-edit provide so many schemes (more than the underlying library per default) because per example the

       emacs scheme support italic for the ReST or Markdown language which the kate scheme doesn't support.

       But I think the kate scheme is more adapt, with his settings, for program source code writing in terms of syntax coloration.

       And the emacs theme is better to use for ReST per example, because of better syntax coloration of italic.

       So better get 2 schemes, which you can easily switch, than missing a feature.

     [/IDEA]

     Editor
     ======

     [IDEA :High:] Make the text-completion configurable.

       1. The text completion is one per file.

       2. The text-completion is one for all files (**not easy**).

     [/IDEA]

     [TODO :High:] Make the regex replacement become true. (See GLib regex) [/TODO]

     [IDEA :Medium:] What about enable/disable spell-check ? [/IDEA]

     Schemes
     -------

     [BUG :High:]

     They is a highlight problem with the search all highlight with emacs schemes.

     [/BUG]


     [IDEA :low: <0F>]

     Think of schemes pairs like:

       + kate && emacs (bg white)

       + cobalt && turbo (bg blue)

       + tango && classic (Are settings defendant).

       + vsdark && oblivion (bg maroon).

       + slate && solarized-dark. (bg turquoise)

       + build && solarized-light (bg light yellow).

       + matrix (standalone).

     [/IDEA]

     Terminals
     =========

     [IDEA :Medium:] Maybe a (main  start) settings individually for every different terminals and/or a main (main  start) settings configuration. [/IDEA]

     [TODO :Medium:] Open a file into an editor tab with a terminal pattern [/TODO]

     Files
     =====

     [TODO :Medium:] Add a ChangeLog entry !

       The clipboard from the terminals has been upgraded from severals functionalities.

     [/TODO]


File: mk-project.info,  Node: License,  Prev: Example of a * todo file,  Up: * todo or * tdo file format specifications

8.9 License
===========

     Copyright (c)  2016,2017  Brüggemann Eddie.

     Permission is granted to copy, distribute and/or modify this document

     under the terms of the GNU Free Documentation License, Version 1.3

     or any later version published by the Free Software Foundation;

     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

     A copy of the license is included in the section entitled "GNU

     Free Documentation License".


File: mk-project.info,  Node: About mk-project,  Next: mk-project Gtk3 types,  Prev: * todo or * tdo file format specifications,  Up: Top

9 About `mk-project'
********************


author: Eddie Brüggemann <<mrcyberfighter@gmail.com>>


documenter: Eddie Brüggemann <<mrcyberfighter@gmail.com>>

* Menu:

* A word from the author::
* Dependencies::


File: mk-project.info,  Node: A word from the author,  Next: Dependencies,  Up: About mk-project

9.1 A word from the author
==========================

I must recognize to write a program which `generates' and `parse'
`severals files' is `painfull' in the `C' `programming language'.

But I hope `that the community will adopt this usefull tool...'

I dislike I.D.E (Integrated Development Environment)’s because their
advantages is their weak point:

     They let you make forget everything once you have configurate their
     interface.

     Even how to build your program (i.e.  The command line to build
     your program, you know it ?).

`I use the commandline everyday' and by doing a `good compromise'
between `automating task' and doesn’t forget `how the command works'.

Is issue `mk-project'...

The adding of the ‘Edit terminals’ is suppose for ‘ed’, ‘vi’, ‘emacs’,
etc users.

And the G.U.I ‘make’ targets launching can be extend *note like explain
in the presentation: f.

`Finally': I hope you will join us to make `mk-project' support more and
more programming languages.


note: I have put all my `savoir-faire' in this project for you and the
entire community.


File: mk-project.info,  Node: Dependencies,  Prev: A word from the author,  Up: About mk-project

9.2 Dependencies
================

* Menu:

* Libraries::
* Main program::
* Documentation: Documentation<2>.
* Debugging::
* Code formatters::
* Internationalisation::
* Documentation Source: Documentation Source<2>.
* THANKS::
* Author final word;: Author final word.


File: mk-project.info,  Node: Libraries,  Next: Main program,  Up: Dependencies

9.2.1 Libraries
---------------

   + ‘libgtk-3-dev’

   + ‘libvte-2.91-dev’

   + ‘libxml2-dev’


File: mk-project.info,  Node: Main program,  Next: Documentation<2>,  Prev: Libraries,  Up: Dependencies

9.2.2 Main program
------------------

   + The ‘make’ program.

   + ‘coreutils’


File: mk-project.info,  Node: Documentation<2>,  Next: Debugging,  Prev: Main program,  Up: Dependencies

9.2.3 Documentation
-------------------

   + ‘python(3)-sphinx’

   + ‘python(3)-docutils’


File: mk-project.info,  Node: Debugging,  Next: Code formatters,  Prev: Documentation<2>,  Up: Dependencies

9.2.4 Debugging
---------------

   + ‘binutils’

   + ‘libc-bin’

   + ‘findutils’

   + ‘file’

   + ‘size’

   + ‘hexdump’


note: Only required if you make usage of them, else the corresponding
target won’t be available.


File: mk-project.info,  Node: Code formatters,  Next: Internationalisation,  Prev: Debugging,  Up: Dependencies

9.2.5 Code formatters
---------------------

   + ‘indent’

   + ‘astyle’

   + ‘bcpp’


note: Only required if you make usage of them, else the corresponding
target won’t be available.


File: mk-project.info,  Node: Internationalisation,  Next: Documentation Source<2>,  Prev: Code formatters,  Up: Dependencies

9.2.6 Internationalisation
--------------------------

   + ‘gettext’


note: Only required if you make usage of them, else the corresponding
target won’t be available.


File: mk-project.info,  Node: Documentation Source<2>,  Next: THANKS,  Prev: Internationalisation,  Up: Dependencies

9.2.7 Documentation Source
--------------------------

   + ‘GNU Make manual’ (A very good manual from the GNU manuals serie).


authors: Stallman, McGrath, Smith.

   + ‘C/C++ Compiling’ (A very good book about libraries and machine
     code investigation).


author: Milan Stevanovic.

   + ‘Writing efficient C code’.


author: Jonas Skeppstedt (author of the compiler *note ISO Certicated
and Validated: 88. ‘lmpcc’).

* Menu:

* ISO (ISO/IEC 9899;19999, C language) conform compiler list: ISO ISO/IEC 9899 19999 C language conform compiler list.


File: mk-project.info,  Node: ISO ISO/IEC 9899 19999 C language conform compiler list,  Up: Documentation Source<2>

9.2.7.1 ISO (ISO/IEC 9899:19999, C language) conform compiler list
..................................................................

   + EDG C/C++ 3.0.1, december 2002.

   + lmpcc C99 Compiler for Linux / PowerPC 1.3, july 2003.

   + Sun studio 9, May 2004.

   + IBM VAC 6.0.0.8, October 2004.


note: No ‘gcc’ neither ‘clang’ are certified to be fully compliant with
it.


File: mk-project.info,  Node: THANKS,  Next: Author final word,  Prev: Documentation Source<2>,  Up: Dependencies

9.2.8 THANKS
------------

        + Dennis M Ritchie, for UNIX and C.

        + Richard Stallman, for gcc and the F.S.F movement.

        + Ken Tompson, for UNIX.

        + Linus Tornvalds, for Linux and git.

        + And to every worker for a better world...


File: mk-project.info,  Node: Author final word,  Prev: THANKS,  Up: Dependencies

9.2.9 Author final word:
------------------------

I use ‘mk-project’ since the version `1.0' (spring `2016') for my
programs.

Accompanier with my terminals integrated editor it-edit(1),

where I type my targets instead of using vim or any other T.U.I Terminal
User Interface.

I must confess that I do not use all the targets provided by mk-project.

My most used targets are:

     $ make

     $ make -B

     $ make exec

     $ make fdebug

     $ make gdb

     $ make search-pattern argv="pattern"

     ...

   ---------- Footnotes ----------

   (1) http://www.open-source-projects.net/it-edit/it-edit


File: mk-project.info,  Node: mk-project Gtk3 types,  Next: Indices and tables,  Prev: About mk-project,  Up: Top

10 ‘mk-project’ Gtk3 types
**************************

‘mk-project’ implement some few derivate Widgets, which I will present
here.

You can take a look at the source located in the sub-folders from
‘/usr(/local)/share/mk-project/src’.

To learn how to implement this kind of Widgets:


note: Here you can sea how a sphinx documentation looks like, with this
theme, for C code (c++ code can be documented too) with sphinx.

* Menu:

* GtkSmartIconButton::
* GtkSmartIconButton: GtkSmartIconButton<2>.
* GtkTermTab::
* GtkMkTerm::


File: mk-project.info,  Node: GtkSmartIconButton,  Next: GtkSmartIconButton<2>,  Up: mk-project Gtk3 types

10.1 GtkSmartIconButton
=======================

A simple button with an icon without label and tool-tip which embed an
universal short-cut text.

 -- C Function: GtkWidget* gtk_smart_menu_item_new_all(const gchar
          *label, const gchar *icon_filepath, GtkAccelGroup
          *accel_group, const GdkModifierType accel_modifier, const
          guint accel_key) ;


     Parameters:

        * ‘label’ (‘const gchar *’) – The label to display into the menu
          item.

        * ‘icon_filepath’ (‘const gchar *’) – The menu item icon
          file-path.

        * ‘accel_group’ (‘GtkAccelGroup *’) – The shortcut accelerator
          group.

        * ‘accel_modifier’ (‘const GdkModifierType’) – The shortcut
          modifier.

        * ‘accel_key’ (‘const guint’) – The shortcut accelerator key.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkSmartMenuItem’.

 -- C Function: GtkWidget* gtk_smart_check_menu_item_new_all(const gchar
          *label, const gboolean draw_as_radio, const gchar
          *icon_filepath, GtkAccelGroup *accel_group, const
          GdkModifierType accel_modifier, const guint accel_key) ;


     Parameters:

        * ‘label’ (‘const gchar *’) – The label to display into the menu
          item.

        * ‘draw_as_radio’ (‘const gboolean’) – draw_as_radio

        * ‘icon_filepath’ (‘const gchar *’) – The menu item icon
          file-path.

        * ‘accel_group’ (‘GtkAccelGroup *’) – The shortcut accelerator
          group.

        * ‘accel_modifier’ (‘const GdkModifierType’) – The shortcut
          modifier.

        * ‘accel_key’ (‘const guint’) – The shortcut accelerator key.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkSmartMenuItem’ check button.

 -- C Function: GtkWidget* gtk_smart_radio_menu_item_new_all(const gchar
          *label, const gchar *icon_filepath, GtkAccelGroup
          *accel_group, const GdkModifierType accel_modifier, const
          guint accel_key, GtkWidget* widget) ;


     Parameters:

        * ‘label’ (‘const gchar *’) – The label to display into the menu
          item.

        * ‘draw_as_radio’ (‘const gboolean’) – draw_as_radio

        * ‘icon_filepath’ (‘const gchar *’) – The menu item icon
          file-path.

        * ‘accel_group’ (‘GtkAccelGroup *’) – The shortcut accelerator
          group.

        * ‘accel_modifier’ (‘const GdkModifierType’) – The shortcut
          modifier.

        * ‘accel_key’ (‘const guint’) – The shortcut accelerator key.

        * ‘widget’ (‘NULL’ or ‘GtkWidget*’) – A member from the radio
          button group.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkSmartMenuItem’ radio button.

     Note: You can pass a ‘NULL’ pointer or ‘0’ to the parameters :

        * icon_filepath

        * accel_group

        * accel_modifier

        * accel_key.

        * widgets.


note: You can build others constructors if you have understand How-To
build this kind of widgets.

* Menu:

* Getters::


File: mk-project.info,  Node: Getters,  Up: GtkSmartIconButton

10.1.1 Getters
--------------

 -- C Function: GtkWidget* gtk_smart_menu_item_get_image(GtkWidget*
          smart_menu_item) ;


     Parameters:

        * ‘smart_menu_item’ (‘GtkWidget*’) – The return value from the
          constructors.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkImage’ widget.

 -- C Function: GtkWidget* gtk_smart_menu_item_get_menuitem(GtkWidget*
          smart_menu_item) ;


     Parameters:

        * ‘smart_menu_item’ (‘GtkWidget*’) – The return value from the
          constructors.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkMenuItem’ widget.

 -- C Function: GtkWidget* gtk_smart_menu_item_get_label(GtkWidget*
          smart_menu_item) ;


     Parameters:

        * ‘smart_menu_item’ (‘GtkWidget*’) – The return value from the
          constructors.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkLabel’ widget.

 -- C Function: GtkWidget*
          gtk_smart_menu_item_get_accel_label(GtkWidget*
          smart_menu_item) ;


     Parameters:

        * ‘smart_menu_item’ (‘GtkWidget*’) – The return value from the
          constructors.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkAccelLabel’ widget.


File: mk-project.info,  Node: GtkSmartIconButton<2>,  Next: GtkTermTab,  Prev: GtkSmartIconButton,  Up: mk-project Gtk3 types

10.2 GtkSmartIconButton
=======================

A simple button with an icon without label and tool-tip which embed an
universal short-cut text.

* Menu:

* Constructors::


File: mk-project.info,  Node: Constructors,  Up: GtkSmartIconButton<2>

10.2.1 Constructors
-------------------

 -- C Function: GtkWidget* gtk_smart_icon_button_new_all(const gchar
          *filepath, const gchar *tooltip_text, const guint accel_key,
          const GdkModifierType accel_modifier) ;


     Parameters:

        * ‘filepath’ (‘const gchar *’) – The filepath to the image to
          use as icon.

        * ‘tooltip_text’ (‘const gchar *’) – The tool-tip text without
          the accelerator label.

        * ‘accel_key’ (‘const guint’) – The shortcut accelerator key.

        * ‘accel_modifier’ (‘const GdkModifierType’) – The shortcut
          modifier.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkSmartIconButton’ widget.

 -- C Function: GtkWidget* gtk_smart_icon_toggle_button_new_all(const
          gchar *filepath, const gchar *tooltip_text, const guint
          accel_key, const GdkModifierType accel_modifier) ;


     Parameters:

        * ‘filepath’ (‘const gchar *’) – The filepath to the image to
          use as icon.

        * ‘tooltip_text’ (‘const gchar *’) – The tool-tip text without
          the accelerator label.

        * ‘accel_key’ (‘const guint’) – The shortcut accelerator key.

        * ‘accel_modifier’ (‘const GdkModifierType’) – The shortcut
          modifier.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkSmartIconButton’ toggle button
     widget.


note: This widget is not used into ‘mk-project’ but provided in the hope
to be useful.


File: mk-project.info,  Node: GtkTermTab,  Next: GtkMkTerm,  Prev: GtkSmartIconButton<2>,  Up: mk-project Gtk3 types

10.3 GtkTermTab
===============

     A GtkNoteBook tab with an decorative icon, a label, and close icon
     button.

* Menu:

* Constructor::
* Getters: Getters<2>.


File: mk-project.info,  Node: Constructor,  Next: Getters<2>,  Up: GtkTermTab

10.3.1 Constructor
------------------

 -- C Function: GtkWidget* gtk_mk_term_tab_new(const gchar
          *icon_filepath, const gchar *label, const gchar
          *close_filepath) ;


     Parameters:

        * ‘icon_filepath’ (‘const gchar *’) – Image filepath to display
          as decoration on the right of the tab-label.

        * ‘label’ (‘const gchar *’) – The label to display in the
          ‘GtkMkTermTab’.

        * ‘close_filepath’ (‘const gchar *’) – Image filepath to display
          in the ‘GtkMkTermTab’ as close button icon.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the Widget ‘GtkMkTerm’.


File: mk-project.info,  Node: Getters<2>,  Prev: Constructor,  Up: GtkTermTab

10.3.2 Getters
--------------

 -- C Function: GtkWidget* gtk_mk_term_tab_get_close_button(GtkMkTermTab
          *tab);


     Parameters:

        * ‘tab’ (‘const gchar *’) – An instance of the ‘GtkMkTermTab’.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the Widget ‘GtkButton’ at the right of the
     label.


File: mk-project.info,  Node: GtkMkTerm,  Prev: GtkTermTab,  Up: mk-project Gtk3 types

10.4 GtkMkTerm
==============


warning: This widget implementation is not reusable as is, because of
‘VteTerminal’ configuration variables.

* Menu:

* Constructor: Constructor<2>.
* Getters: Getters<3>.


File: mk-project.info,  Node: Constructor<2>,  Next: Getters<3>,  Up: GtkMkTerm

10.4.1 Constructor
------------------

 -- C Function: GtkWidget* gtk_mkterm_new(gboolean initialize, gboolean
          is_edit_term) ;


     Parameters:

        * ‘initialize’ (‘gboolean’) – Initializing or reconfiguring the
          ‘GtkMkTerm’.

        * ‘is_edit_term’ (‘gboolean’) – Whether or not the ‘GtkMkTerm’
          is a editor widget.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the Widget ‘GtkMkTerm’.


File: mk-project.info,  Node: Getters<3>,  Prev: Constructor<2>,  Up: GtkMkTerm

10.4.2 Getters
--------------

 -- C Function: GtkWidget* gtk_mkterm_get_vte_terminal(GtkWidget*
          mkterm) ;


     Parameters:

        * ‘mkterm’ (‘GtkWidget*’) – An instance of the ‘GtkMkTerm’
          Widget.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘VteTerminal’.

 -- C Function: GtkWidget* gtk_mkterm_get_clipboard_menu(GtkWidget*
          mkterm) ;


     Parameters:

        * ‘mkterm’ (‘GtkWidget*’) – Initializing or reconfiguring the
          ‘GtkMkTerm’.


     Return type: ‘GtkWidget*’


     Returns: A pointer to the ‘GtkMenu’ associated to the ‘GtkMkTerm’.


File: mk-project.info,  Node: Indices and tables,  Next: Index,  Prev: mk-project Gtk3 types,  Up: Top

Indices and tables
******************

   * genindex

   * modindex

   * search


File: mk-project.info,  Node: Index,  Prev: Indices and tables,  Up: Top

Index
*****

 [index ]
* Menu:

* $VALGRIND_OPTS:                        Valgrind targets.     (line 23)
* environment variable; $VALGRIND_OPTS:  Valgrind targets.     (line 23)
* environment variable; VALGRIND_OPTS:   Valgrind.             (line 23)
* VALGRIND_OPTS:                         Valgrind.             (line 23)



Tag Table:
Node: Top356
Ref: index doc577
Ref: 0577
Node: mk-project4813
Ref: mk-project_presentation mk-project4917
Ref: 14917
Ref: mk-project_presentation doc4917
Ref: 24917
Ref: mk-project_presentation welcome-to-mk-project-s-documentation4917
Ref: 34917
Node: Presentation5260
Ref: mk-project_presentation presentation5338
Ref: 45338
Node: Hackme7434
Ref: mk-project_presentation mk-project-hackme7544
Ref: 57544
Ref: mk-project_presentation hackme7544
Ref: 67544
Node: What provide mk-project8197
Ref: mk-project_presentation what-provide-mk-project8315
Ref: 98315
Ref: mk-project_presentation set-make-help11664
Ref: 711664
Node: How mk-project works12690
Ref: mk-project_presentation how-mk-project-works12810
Ref: c12810
Node: Author s13471
Ref: mk-project_presentation author-s13581
Ref: d13581
Ref: mk-project_presentation developers-contributors13581
Ref: 813581
Node: Contributor s13719
Ref: mk-project_presentation contributor-s13833
Ref: e13833
Node: The future of mk-project13890
Ref: mk-project_presentation futur-of-mk-project13987
Ref: f13987
Ref: mk-project_presentation the-future-of-mk-project13987
Ref: 1013987
Node: mk-project mic-on !!!14113
Ref: mk-project_presentation mk-project-mic-on14199
Ref: 1114199
Node: Building a mk-project project15012
Ref: mk-project_build_a_project doc15154
Ref: 1215154
Ref: mk-project_build_a_project building-a-mk-project-project15154
Ref: 1315154
Node: Starting15498
Ref: mk-project_build_a_project starting15608
Ref: 1415608
Node: C/C++ Compiler settings16496
Ref: mk-project_build_a_project c-c-compiler-settings16620
Ref: 1516620
Node: Files19004
Ref: mk-project_build_a_project files19133
Ref: 1619133
Node: Disassembling19729
Ref: mk-project_build_a_project disassembling19844
Ref: 1719844
Node: Profiling20254
Ref: mk-project_build_a_project profiling20385
Ref: 1920385
Node: Oprofile20450
Ref: mk-project_build_a_project oprofile20525
Ref: 1a20525
Node: Valgrind20826
Ref: mk-project_build_a_project valgrind20901
Ref: 1b20901
Node: C/C++ code formatters21896
Ref: mk-project_build_a_project c-c-code-formatters22027
Ref: 1c22027
Node: Documentation22645
Ref: mk-project_build_a_project documentation22785
Ref: 1e22785
Node: man-page23088
Ref: mk-project_build_a_project man-page23150
Ref: 1f23150
Node: About informations23439
Ref: mk-project_build_a_project about-informations23577
Ref: 2023577
Node: Others Informations23879
Ref: mk-project_build_a_project others-informations24013
Ref: 2124013
Node: Licensing24284
Ref: mk-project_build_a_project licensing24414
Ref: 2224414
Node: * desktop file24598
Ref: mk-project_build_a_project desktop-file24731
Ref: 2324731
Node: Archiving your project24825
Ref: mk-project_build_a_project archiving-your-project24956
Ref: 2424956
Node: Summary25382
Ref: mk-project_build_a_project summary25490
Ref: 2525490
Node: Exporting your settings25707
Ref: mk-project_build_a_project exporting-your-settings25778
Ref: 2625778
Node: Working on an existing mk-project project26168
Ref: mk-project_current_project doc26324
Ref: 2726324
Ref: mk-project_current_project working-on-an-existing-mk-project-project26324
Ref: 2826324
Node: Open an mk-project project26533
Ref: mk-project_current_project open-an-mk-project-project26683
Ref: 2926683
Node: Reconfiguring an existing project27810
Ref: mk-project_current_project reconfiguring-an-existing-project27997
Ref: 2a27997
Node: Adding files to your project28473
Ref: mk-project_current_project adding-files-to-your-project28625
Ref: 2b28625
Node: mk-project documentation29540
Ref: mk-project_documentation mk-project-documentation29724
Ref: b29724
Ref: mk-project_documentation doc29724
Ref: 2c29724
Ref: mk-project_documentation id129724
Ref: 2d29724
Node: Introduction29964
Ref: mk-project_documentation introduction30071
Ref: 2e30071
Ref: Introduction-Footnote-130846
Ref: Introduction-Footnote-230914
Ref: Introduction-Footnote-330950
Node: You are a sphinx user31018
Ref: mk-project_documentation you-are-a-sphinx-user31158
Ref: 2f31158
Node: You aren't a sphinx user31242
Ref: mk-project_documentation you-aren-t-a-sphinx-user31404
Ref: 3031404
Ref: You aren't a sphinx user-Footnote-133897
Ref: You aren't a sphinx user-Footnote-233965
Node: mk-project documentation visualize34001
Ref: mk-project_documentation mk-project-documentation-visualize34158
Ref: 3134158
Node: mk-project slots35403
Ref: mk-project_documentation mk-project-slots35543
Ref: 3235543
Node: rst2man37859
Ref: mk-project_documentation rst2man37956
Ref: 3337956
Node: mk-project code investigating debugging and disassembling38298
Ref: mk-project_debugging mk-project-debugging38467
Ref: 1838467
Ref: mk-project_debugging doc38467
Ref: 3438467
Ref: mk-project_debugging mk-project-code-investigating-debugging-and-disassembling38467
Ref: 3538467
Node: Introduction<2>38938
Ref: mk-project_debugging introduction39080
Ref: 3639080
Node: The make info target39288
Ref: mk-project_debugging the-make-info-target39458
Ref: 3739458
Node: The file utility39706
Ref: mk-project_debugging the-file-utility39808
Ref: 3839808
Node: The size utility40025
Ref: mk-project_debugging the-size-utility40127
Ref: 3940127
Node: The make gdb target40305
Ref: mk-project_debugging the-make-gdb-target40479
Ref: 3a40479
Node: The make ldd target41216
Ref: mk-project_debugging the-make-ldd-target41388
Ref: 3b41388
Node: The make nm target42741
Ref: mk-project_debugging the-make-nm-target42917
Ref: 3c42917
Ref: The make nm target-Footnote-144243
Node: The make objdump target44304
Ref: mk-project_debugging the-make-objdump-target44483
Ref: 3d44483
Node: The make strace target46525
Ref: mk-project_debugging the-make-strace-target46708
Ref: 3e46708
Node: The make ltrace target47353
Ref: mk-project_debugging the-make-ltrace-target47534
Ref: 3f47534
Node: The make strip target48131
Ref: mk-project_debugging the-make-strip-target48306
Ref: 4048306
Node: Oprofile targets48904
Ref: mk-project_debugging oprofile-targets49073
Ref: 4149073
Node: Valgrind targets50222
Ref: mk-project_debugging valgrind-targets50391
Ref: 4250391
Node: Alternative to *_OPTS51165
Ref: mk-project_debugging alternative-to-opts51338
Ref: 4351338
Node: Documentation Source51498
Ref: mk-project_debugging documentation-source51646
Ref: 4451646
Node: mk-project code formatters51941
Ref: mk-project_code_formatting mk-project-code-formatters52117
Ref: 4552117
Ref: mk-project_code_formatting code-formatters52117
Ref: 1d52117
Ref: mk-project_code_formatting doc52117
Ref: 4652117
Node: Introduction<3>52281
Ref: mk-project_code_formatting introduction52396
Ref: 4752396
Node: For C or C++ source code52599
Ref: mk-project_code_formatting for-c-or-c-source-code52679
Ref: 4852679
Node: Using the indent utility52807
Ref: mk-project_code_formatting using-the-indent-utility52955
Ref: 4952955
Node: Using the astyle utility54065
Ref: mk-project_code_formatting using-the-astyle-utility54189
Ref: 4a54189
Node: mk-project contributing advices55972
Ref: mk-project_participating mk-project-participating56133
Ref: a56133
Ref: mk-project_participating doc56133
Ref: 4b56133
Ref: mk-project_participating mk-project-contributing-advices56133
Ref: 4c56133
Node: mk-project zen56304
Ref: mk-project_participating mk-project-zen56414
Ref: 4d56414
Node: How contibute ?56890
Ref: mk-project_participating how-contibute57020
Ref: 4e57020
Node: For writing a new project57478
Ref: mk-project_participating for-writing-a-new-project57576
Ref: 4f57576
Node: Makefile57977
Ref: mk-project_participating makefile58093
Ref: 5058093
Node: Scripting58456
Ref: mk-project_participating scripting58555
Ref: 5158555
Node: Becoming59063
Ref: mk-project_participating becoming59159
Ref: 5259159
Node: NOTES59666
Ref: mk-project_participating notes59744
Ref: 5359744
Node: Makefile<2>60124
Ref: mk-project_participating id160255
Ref: 5460255
Node: BINARIES60399
Ref: mk-project_participating binaries60477
Ref: 5560477
Node: VARIABLES60993
Ref: mk-project_participating variables61088
Ref: 5661088
Node: Files<2>62774
Ref: mk-project_participating files62879
Ref: 5762879
Node: FILES and FILEPATH63139
Ref: mk-project_participating files-and-filepath63244
Ref: 5863244
Node: LIBRARIES64284
Ref: mk-project_participating libraries64388
Ref: 5964388
Node: TARGETS64786
Ref: mk-project_participating targets64879
Ref: 5a64879
Node: ADVICES65332
Ref: mk-project_participating advices65407
Ref: 5b65407
Node: code formatters65598
Ref: mk-project_participating code-formatters65705
Ref: 5c65705
Node: C65959
Ref: mk-project_participating c66028
Ref: 5d66028
Node: C++66200
Ref: mk-project_participating id266282
Ref: 5e66282
Node: HTML66568
Ref: mk-project_participating html66652
Ref: 5f66652
Node: CSS66712
Ref: mk-project_participating css66802
Ref: 6066802
Node: Javascipt66863
Ref: mk-project_participating javascipt66953
Ref: 6166953
Node: Perl67141
Ref: mk-project_participating perl67231
Ref: 6267231
Node: PHP67295
Ref: mk-project_participating php67380
Ref: 6367380
Node: Ruby67558
Ref: mk-project_participating ruby67642
Ref: 6467642
Node: XML67870
Ref: mk-project_participating xml67973
Ref: 6567973
Node: Using a code formatter68036
Ref: mk-project_participating using-a-code-formatter68126
Ref: 6668126
Node: * todo or * tdo file format specifications68655
Ref: mk-project_todo_file_specifications todo-or-tdo-file-format-specifications68806
Ref: 6768806
Ref: mk-project_todo_file_specifications doc68806
Ref: 6868806
Node: Markup syntax69582
Ref: mk-project_todo_file_specifications markup-syntax69699
Ref: 6969699
Node: Markup Types70191
Ref: mk-project_todo_file_specifications markup-types70331
Ref: 6a70331
Node: Before complete the task70522
Ref: mk-project_todo_file_specifications before-complete-the-task70631
Ref: 6b70631
Node: After complete the task71052
Ref: mk-project_todo_file_specifications after-complete-the-task71185
Ref: 6c71185
Node: Summary of TYPE71589
Ref: mk-project_todo_file_specifications summary-of-type71689
Ref: 6d71689
Node: Priority_level71941
Ref: mk-project_todo_file_specifications priority-level72078
Ref: 6e72078
Node: TASK_ORDER72219
Ref: mk-project_todo_file_specifications task-order72351
Ref: 6f72351
Node: Advices73336
Ref: mk-project_todo_file_specifications advices73485
Ref: 7073485
Node: Syntax of * todo file s content74194
Ref: mk-project_todo_file_specifications syntax-of-todo-file-s-content74387
Ref: 7174387
Node: For Titles74844
Ref: mk-project_todo_file_specifications for-titles74955
Ref: 7274955
Node: For text decorations75429
Ref: mk-project_todo_file_specifications for-text-decorations75558
Ref: 7375558
Node: For Lists75733
Ref: mk-project_todo_file_specifications for-lists75879
Ref: 7475879
Node: For keywords values pairing76199
Ref: mk-project_todo_file_specifications for-keywords-values-pairing76334
Ref: 7576334
Node: For links76470
Ref: mk-project_todo_file_specifications for-links76609
Ref: 7676609
Node: For footnotes76703
Ref: mk-project_todo_file_specifications for-footnotes76827
Ref: 7776827
Node: For comments76897
Ref: mk-project_todo_file_specifications for-comments77025
Ref: 7877025
Node: For code text77090
Ref: mk-project_todo_file_specifications for-code-text77196
Ref: 7977196
Node: End word of specifications of the * todo file s format77363
Ref: mk-project_todo_file_specifications end-word-of-specifications-of-the-todo-file-s-format77573
Ref: 7a77573
Node: Example of a * todo file77872
Ref: mk-project_todo_file_specifications example-of-a-todo-file78058
Ref: 7b78058
Node: License80164
Ref: mk-project_todo_file_specifications license80287
Ref: 7c80287
Node: About mk-project80767
Ref: mk-project_about about-mk-project80908
Ref: 7d80908
Ref: mk-project_about doc80908
Ref: 7e80908
Node: A word from the author81123
Ref: mk-project_about a-word-from-the-author81223
Ref: 7f81223
Node: Dependencies82333
Ref: mk-project_about dependencies82433
Ref: 8082433
Node: Libraries82704
Ref: mk-project_about libraries82787
Ref: 8182787
Node: Main program82897
Ref: mk-project_about main-program83005
Ref: 8283005
Node: Documentation<2>83096
Ref: mk-project_about documentation83204
Ref: 8383204
Node: Debugging83305
Ref: mk-project_about debugging83416
Ref: 8483416
Node: Code formatters83668
Ref: mk-project_about code-formatters83783
Ref: 8583783
Node: Internationalisation83984
Ref: mk-project_about internationalisation84113
Ref: 8684113
Node: Documentation Source<2>84289
Ref: mk-project_about documentation-source84409
Ref: 8784409
Node: ISO ISO/IEC 9899 19999 C language conform compiler list84978
Ref: mk-project_about iso-conform-compiler-list85097
Ref: 8885097
Ref: mk-project_about iso-iso-iec-9899-19999-c-language-conform-compiler-list85097
Ref: 8985097
Node: THANKS85484
Ref: mk-project_about thanks85601
Ref: 8a85601
Node: Author final word85868
Ref: mk-project_about author-final-word85953
Ref: 8b85953
Ref: Author final word-Footnote-186510
Node: mk-project Gtk3 types86570
Ref: mk-project-gtk3-types mk-project-gtk3-types86687
Ref: 8c86687
Ref: mk-project-gtk3-types doc86687
Ref: 8d86687
Node: GtkSmartIconButton87230
Ref: mk-project-gtk3-types gtksmarticonbutton87340
Ref: 8e87340
Node: Getters90584
Ref: mk-project-gtk3-types getters90650
Ref: 8f90650
Node: GtkSmartIconButton<2>91972
Ref: mk-project-gtk3-types id192101
Ref: 9092101
Node: Constructors92275
Ref: mk-project-gtk3-types constructors92349
Ref: 9192349
Node: GtkTermTab93933
Ref: mk-project-gtk3-types gtktermtab94053
Ref: 9294053
Node: Constructor94221
Ref: mk-project-gtk3-types constructor94302
Ref: 9394302
Node: Getters<2>94988
Ref: mk-project-gtk3-types id295069
Ref: 9495069
Node: GtkMkTerm95421
Ref: mk-project-gtk3-types gtkmkterm95511
Ref: 9595511
Node: Constructor<2>95721
Ref: mk-project-gtk3-types id395804
Ref: 9695804
Node: Getters<3>96281
Ref: mk-project-gtk3-types id496364
Ref: 9796364
Node: Indices and tables97025
Ref: index indices-and-tables97131
Ref: 9897131
Node: Index97213

End Tag Table


Local Variables:
coding: utf-8
End:
