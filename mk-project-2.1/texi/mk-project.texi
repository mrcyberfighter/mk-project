\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename mk-project.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.5.6.@*
@end ifinfo
@settitle mk-project Documentation
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* mk-project: (mk-project.info). One line description of project.
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
mk-project 2.1, Nov 15, 2017

Brüggemann Eddie

Copyright @copyright{} 2017, Brüggemann Eddie
@end quotation

@end copying

@titlepage
@title mk-project Documentation
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top mk-project Documentation
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{0}
@c mk-project documentation master file, created by
@c sphinx-quickstart on Thu Jun  8 23:22:01 2017.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@menu
* mk-project:: 
* Building a mk-project project:: 
* Working on an existing mk-project project:: 
* mk-project documentation:: 
* mk-project code investigating@comma{} debugging and disassembling: mk-project code investigating debugging and disassembling. 
* mk-project code formatters:: 
* mk-project contributing advices:: 
* *.todo or *.tdo file format specifications;: * todo or * tdo file format specifications. 
* About mk-project:: 
* mk-project Gtk3 types:: 
* Indices and tables:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

mk-project

* Presentation:: 
* Hackme:: 
* What provide mk-project:: 
* How mk-project works:: 
* Author(s): Author s. 
* Contributor(s): Contributor s. 
* The future of mk-project:: 

The future of mk-project

* mk-project; mic-on !!!: mk-project mic-on !!!. 

Building a mk-project project

* Starting:: 
* C/C++ Compiler settings:: 
* Files:: 
* Disassembling:: 
* Profiling:: 
* C/C++ code formatters:: 
* Documentation:: 
* About informations:: 
* Others Informations:: 
* Licensing:: 
* *.desktop file: * desktop file. 
* Archiving your project:: 
* Summary:: 

Profiling

* Oprofile:: 
* Valgrind:: 

Documentation

* man-page:: 

Summary

* Exporting your settings:: 

Working on an existing mk-project project

* Open an mk-project project:: 
* Reconfiguring an existing project:: 
* Adding files to your project:: 

mk-project documentation

* Introduction:: 
* You are a sphinx user;: You are a sphinx user. 
* You aren't a sphinx user:: 
* mk-project documentation visualize:: 
* mk-project slots:: 
* rst2man:: 

mk-project code investigating, debugging and disassembling

* Introduction: Introduction<2>. 
* The make info target:: 
* The make gdb target:: 
* The make ldd target:: 
* The make nm target:: 
* The make objdump target:: 
* The make strace target:: 
* The make ltrace target:: 
* The make strip target:: 
* Oprofile targets:: 
* Valgrind targets:: 
* Alternative to *_OPTS:: 
* Documentation Source:: 

The make info target

* The file utility:: 
* The size utility:: 

mk-project code formatters

* Introduction: Introduction<3>. 
* Using the indent utility:: 
* Using the astyle utility:: 

Introduction

* For C or C++ source code;: For C or C++ source code. 

mk-project contributing advices

* mk-project zen:: 
* How contibute ?:: 
* Makefile: Makefile<2>. 
* code formatters:: 

How contibute ?

* For writing a new project;: For writing a new project. 
* Makefile:: 
* Scripting:: 
* Becoming:: 
* NOTES:: 

Makefile

* BINARIES:: 
* VARIABLES:: 
* Files: Files<2>. 
* FILES and FILEPATH:: 
* LIBRARIES:: 
* TARGETS:: 
* ADVICES:: 

code formatters

* C:: 
* C++:: 
* HTML:: 
* CSS:: 
* Javascipt:: 
* Perl:: 
* PHP:: 
* Ruby:: 
* XML:: 
* Using a code formatter:: 

*.todo or *.tdo file format specifications:

* Markup syntax:: 
* Markup Types:: 
* Priority_level:: 
* TASK_ORDER:: 
* Advices:: 
* Syntax of *.todo file(s) content: Syntax of * todo file s content. 
* End word of specifications of the *.todo file(s) format: End word of specifications of the * todo file s format. 
* Example of a *.todo file;: Example of a * todo file. 
* License:: 

Markup Types

* Before complete the task;: Before complete the task. 
* After complete the task;: After complete the task. 
* Summary of TYPE:: 

Syntax of *.todo file(s) content

* For Titles:: 
* For text decorations;: For text decorations. 
* For Lists;: For Lists. 
* For keywords values pairing;: For keywords values pairing. 
* For links;: For links. 
* For footnotes;: For footnotes. 
* For comments;: For comments. 
* For code text;: For code text. 

About mk-project

* A word from the author:: 
* Dependencies:: 

Dependencies

* Libraries:: 
* Main program:: 
* Documentation: Documentation<2>. 
* Debugging:: 
* Code formatters:: 
* Internationalisation:: 
* Documentation Source: Documentation Source<2>. 
* THANKS:: 
* Author final word;: Author final word. 

Documentation Source

* ISO (ISO/IEC 9899;19999@comma{} C language) conform compiler list: ISO ISO/IEC 9899 19999 C language conform compiler list. 

mk-project Gtk3 types

* GtkSmartIconButton:: 
* GtkSmartIconButton: GtkSmartIconButton<2>. 
* GtkTermTab:: 
* GtkMkTerm:: 

GtkSmartIconButton

* Getters:: 

GtkSmartIconButton

* Constructors:: 

GtkTermTab

* Constructor:: 
* Getters: Getters<2>. 

GtkMkTerm

* Constructor: Constructor<2>. 
* Getters: Getters<3>. 

@end detailmenu
@end menu

@node mk-project,Building a mk-project project,Top,Top
@anchor{mk-project_presentation mk-project}@anchor{1}@anchor{mk-project_presentation doc}@anchor{2}@anchor{mk-project_presentation welcome-to-mk-project-s-documentation}@anchor{3}
@chapter @code{mk-project}


@*author: 
Brüggemann Eddie <@email{mrcyberfighter@@gmail.com}>


@*program: 
mk-project


@*version: 
2.1


@*language: 
C


@*release: 
Nov 15, 2017


@menu
* Presentation:: 
* Hackme:: 
* What provide mk-project:: 
* How mk-project works:: 
* Author(s): Author s. 
* Contributor(s): Contributor s. 
* The future of mk-project:: 

@end menu

@node Presentation,Hackme,,mk-project
@anchor{mk-project_presentation presentation}@anchor{4}
@section Presentation


@code{mk-project} is a @strong{C} and @strong{C++} project builder, with a nice @abbr{G.U.I,Graphical User Interface}, which generate at first a big, big do it all, @code{Makefile}.

So that you can create a project and keep the tree of your project, which reflect the UNIX file system tree.

@*note: 
@code{mk-project} does not claim to replace the auto-tools but it is build on the top in the spirit of development instead of distributing.



@display
@w{ }
@end display



In addition @code{vim} or others @abbr{T.U.I,Terminal User Interface} editors users,

can use the entire program by editing their source files into the Terminals ‣ Edit terminal which is a notebook, you can adding as many terminals you want.


@display
@w{ }
@end display



Else @code{mk-project} is a tool done to @emph{ease the development process} of @strong{C} or @strong{C++} programs and a good bridge for the distributing process. Especially with the @strong{autotools}.

@code{mk-project} is a @abbr{T.D.E,Terminal Development Environment} (@strong{T}erminal @strong{D}evelopement @strong{E}nvironment):

@quotation

an @strong{utility} used for the @strong{development} of @strong{programs} with many functionalities !
@end quotation

@code{mk-project} is based on the @code{make} tool which on his turn, use severals utilities, for providing many features

and so many useful @code{make} targets.

Callable through a terminal, in preference (or through the @abbr{G.U.I} from @code{mk-project}: targets ‣ *).


@display
@w{ }
@end display



@code{mk-project} is an @code{Environment} in the terms of his wide field of @code{targets} which aren't statically at all.

But @strong{dynamically} @emph{configurable}, @emph{changeable} and @emph{self-build-able} and so that the grass becomes greener...

The @code{targets} are short string easy to remember and so you can make work


@itemize *

@item 
your computer, through the terminals

@item 
and mostly your head through @strong{remembering}, @strong{configuring}, @strong{modifying} and @strong{creating} @code{targets}.
@end itemize

And not become an @abbr{I.D.E} (@strong{I}ntegrated @strong{D}evelopment @strong{E}nvironment)  @strong{zombie} thrashing his head and knows !

But a proud well informed programmer which knows exactly how his system and environment works which can easily automate the task using the @code{make} syntax.

@node Hackme,What provide mk-project,Presentation,mk-project
@anchor{mk-project_presentation mk-project-hackme}@anchor{5}@anchor{mk-project_presentation hackme}@anchor{6}
@section Hackme


You can @strong{edit} the @code{Makefile} by hand at your convenience, of course @strong{!}

@cartouche
@quotation Note 
But I think It's better for some @ref{7,,generic targets to include} them directly

into the template file(s) you will find at @code{$(pkgdatadir)}: @code{/usr(/local/share/mk-project/templates/*}

So that you get it every time you generate a new project.

@*warning: 
If you do this: you must take care of escaping the '%' with a '%' character : "%%".


But think to notify the @ref{8,,developers},

to inform them about your add-on(s) if you think it's reliable and usable for others.
@end quotation
@end cartouche

@c To set where it's the best to fit in.

@c You will surely ask you the question: Of what is made and what make :program:`mk-project` for me.

@c The answers is simply ``all is make in Makefiles``, which will make you *the development easier*.

@node What provide mk-project,How mk-project works,Hackme,mk-project
@anchor{mk-project_presentation what-provide-mk-project}@anchor{9}
@section What provide @code{mk-project}


@cartouche
@quotation Note 
At the time i write this documentation @code{mk-project} support:

the @strong{C} and @strong{C++} programming language.

@emph{"I invite all the community to work together to take in charge more languages..."}

@c TODO: make a file of the written one.

@*file: 
@ref{a,,see this document for participating (You can become from the simple contributor to the entire coauthor).}

@end quotation
@end cartouche


@itemize +

@item 
@code{mk-project} provide at first a solid base for building a work,

through a big Makefile, which can be edited manually in respect of the following few conventions:
@end itemize

@cartouche
@quotation Note 

@itemize +

@item 
Configuration settings are set through the string:


@itemize +

@item 
@strong{F} For false (disable option).

@item 
@strong{T} for true (enable option).
@end itemize

@item 
Some few others variables:

The variable @code{$(SRC_FILES)} is build from the variable @code{$(SRC_DIR)} which value is always: @code{./src}.

@quotation

This mean if you want to add files manually (@emph{if you doesn't use the GUI for this task}) to your Makefile,

do it properly by using the @code{$(SRC_DIR)} variable:

@example
SRC_DIR   = ./src

SRC_FILES = $@{SRC_DIR@}/my_file$@{EXT_SRC@} \
            $@{SRC_DIR@}/subfolder/my_file$@{EXT_SRC@}
@end example

So you will add file(s) relative to the @code{./src} directory where source file(s) have to reside.

@*note: 
Otherwise simply use the @abbr{G.U.I} for adding file(s) Project -> Add file(s) to project.

@end quotation
@end itemize
@end quotation
@end cartouche


@itemize +

@item 
A building system for your source files.

@item 
Many tools for machine code investigation:

From the simple @strong{-g} option setting by a @code{GNU-Compiler} for debbuging with @code{gdb}, through @strong{disassemble} the @emph{machine code} files and @emph{executable tracing}, to @strong{profiling} the entire work.

@item 
For the documentation @code{mk-project} support @ref{b,,the sphinx documentation generator}.

The @code{sphinx} documentation @code{targets} support many output formats:

@c to update


@itemize +

@item 
@strong{info} files.

@item 
@strong{man} (manual pages).

@item 
@strong{HTML}, single @strong{HTML}, and @strong{texi HTML} documentation.

@item 
@strong{PDF} and @strong{LATEXPDF} files.

@item 
@strong{XML} files.

@item 
@strong{LATEX} files.

@item 
@strong{EPUB} files.
@end itemize

@strong{And many more} through @code{sphinx} like: @strong{qthelp}, @strong{applehelp}, @strong{xml}, @strong{json} or @strong{devhelp} per example.
@end itemize

@code{mk-project} provide a simple @abbr{G.U.I} composing of terminals and a menu-bar.

At first you can use the menu items to perform some actions like:

@quotation


@itemize +

@item 
Generate a new project: Project -> New Project.

Then you have to configure your project answering some basics questions like:


@itemize *

@item 
Programming language.

@item 
Program name

@item 
Project folder (in which the new project will be generate).
@end itemize

And some others according to your settings.
@end itemize

Once the new project is generated you can access to the make targets either through the @code{mk-project} @abbr{G.U.I} menu-bar (@emph{simple click on the wanted target to execute it !}).

Or from the terminal of @code{mk-project} or any else terminal at the condition to be in the @code{Makefile} current folder.

@*note: 
Simply type @code{$ make help} to get the list of available targets.

@end quotation
@anchor{mk-project_presentation set-make-help}@anchor{7}
@quotation

@cartouche
@quotation Warning 
If you add some user-targets, to the @code{Makefile(s)}, think at adding them to the @code{$ make help} output.

So that mk-project can auto-detect your target and list it to add it as menu item to the make targets.

If you add a bash comment on the same line it will be displayed as tool-tip by overfly the menu items.

@*warning: 
Simply think to limit your entry at terminal maximal size: 79 characters.

@end quotation
@end cartouche
@end quotation

So @code{mk-project} provide another terminals ordered in tabs which you can add, remove, and configuring.

For purpose of terminals editor users like @code{vi}, @code{ed}, @code{emacs} which can be easily launch an instance their favorite @code{terminal editor} in every tab all that continuing using the @code{mk-project} @emph{interface}.

Finally you can switch between the single terminals -> make terminal   (which should stay in the @code{Makefile} current folder) and the terminals -> edit terminals terminals using the menu radio items.

@node How mk-project works,Author s,What provide mk-project,mk-project
@anchor{mk-project_presentation how-mk-project-works}@anchor{c}
@section How @code{mk-project} works


@*note: 
The answers is simply @code{all is make in Makefiles}, which will make you @emph{the development easier}.


@c Talk about the defines.h and includes.h files and the separated build system when is a good location for talking about it.

@c I think of making a doc page per project.

@code{mk-project} doesn't claim to replace an @strong{IDE} or others @strong{building tools} but only give you an alternative

which @code{you can entirely adapt} to your requirement.

@cartouche
@quotation Note 
For being @strong{true} the @code{make} tool implementation and the way it make you the life easier

without forgetting your @code{TTY Knows} has impress me so that

I couldn't develop a good project without it

or in others words:

@example
If the make tool have never exist I would invent it...
@end example
@end quotation
@end cartouche

@node Author s,Contributor s,How mk-project works,mk-project
@anchor{mk-project_presentation author-s}@anchor{d}@anchor{mk-project_presentation developers-contributors}@anchor{8}
@section Author(s)


@*Developer: 
@email{mrcyberfighter@@gmail,Brüggemann Eddie}


@*Documenter: 
@email{mrcyberfighter@@gmail,Brüggemann Eddie}


@node Contributor s,The future of mk-project,Author s,mk-project
@anchor{mk-project_presentation contributor-s}@anchor{e}
@section Contributor(s)


@strong{Become one !!!}

@c Thanks from everybody using and get interest into mk-project !

@node The future of mk-project,,Contributor s,mk-project
@anchor{mk-project_presentation futur-of-mk-project}@anchor{f}@anchor{mk-project_presentation the-future-of-mk-project}@anchor{10}
@section The future of @code{mk-project}


@menu
* mk-project; mic-on !!!: mk-project mic-on !!!. 

@end menu

@node mk-project mic-on !!!,,,The future of mk-project
@anchor{mk-project_presentation mk-project-mic-on}@anchor{11}
@subsection @code{mk-project}: @code{mic-on} !!!


@cartouche
@quotation Note 
The idea is to sit in front of the interface of @code{mk-project} (@code{microphone on} @strong{!}),

writing the @emph{source code} from your last creation:

And to say @code{execute: make exec}, or the target you want...

The @strong{program} could @strong{react} by @emph{analyzing your voice entry} and @strong{executing the target} !!!

So that the build is @strong{automate} by (@emph{simple}) @strong{voice recognition}.

So you can write your @strong{program} with your hands

@quotation

and
@end quotation

@strong{build it} with by emitting a @emph{simple order} so that the @emph{program execute the corresponding target},

if recognize...

@strong{What do you think about it ?}

@*note: 
We could enhance @code{mk-project} in the way of Speech recognition...

@end quotation
@end cartouche

@node Building a mk-project project,Working on an existing mk-project project,mk-project,Top
@anchor{mk-project_build_a_project doc}@anchor{12}@anchor{mk-project_build_a_project building-a-mk-project-project}@anchor{13}
@chapter Building a @code{mk-project} project


@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@menu
* Starting:: 
* C/C++ Compiler settings:: 
* Files:: 
* Disassembling:: 
* Profiling:: 
* C/C++ code formatters:: 
* Documentation:: 
* About informations:: 
* Others Informations:: 
* Licensing:: 
* *.desktop file: * desktop file. 
* Archiving your project:: 
* Summary:: 

@end menu

@node Starting,C/C++ Compiler settings,,Building a mk-project project
@anchor{mk-project_build_a_project starting}@anchor{14}
@section Starting


At first some basic informations will be required:


@itemize +

@item 
The programming language from the project.


@itemize +

@item 
@strong{C}
@end itemize

Or


@itemize +

@item 
@strong{C++}
@end itemize

@item 
The project name which will become the program name

the binary name.

@item 
The @strong{program version} which, if empty will be arbitrary set to the value @code{0.0}.

@item 
The folder where to generate the project.

@*warning: 
The folder must be empty (Advice: create it with the folder-chooser at the same time as the project).


@item 
The license of your project.


@itemize +

@item 
GPL

@item 
AGPL

@item 
LGPL

@item 
FDL

@item 
Apache 2.0 License

@item 
Clear BSD

@item 
Free BSD

@item 
Other
@end itemize
@end itemize

@*note: 
The license files will be copied into the project folder according to your choice of format(s).



@itemize *

@item 
docbook

@item 
epub

@item 
pdf

@item 
latex

@item 
html

@item 
texinfo

@item 
text
@end itemize

@node C/C++ Compiler settings,Files,Starting,Building a mk-project project
@anchor{mk-project_build_a_project c-c-compiler-settings}@anchor{15}
@section @strong{C}/@strong{C++} Compiler settings


For every entry except the "Compiler entry" you get an aside button which

will permit you to add the @emph{most common settings} @strong{easily}.


@itemize +

@item 
@strong{Compiler:}

You can choose a compiler to use, which default to @code{cc} for a @strong{C} project and @code{c++} for @strong{C++}.

But you can set clang per example or the compiler you want.

@*warning: 
The exactness of your entry will be checked by compiling a minimal program.


@item 
@strong{Warnings:}

You can set the warnings to use.

@cartouche
@quotation Note 
The aside button will permit you to insert as warnings the following most common warnings settings:


@itemize +

@item 
@code{-Wall} (@emph{All warning: sea the documentation of your compiler to see which are enabled}).

@item 
@code{-Wextra} (@emph{Extra warning: sea the documentation of your compiler to see which are enabled}).

@item 
@code{-Wpedantic} (@emph{ISO conform: most extension are permitted. sea the documentation of your compiler to see which are enabled}).

@item 
@code{-w} (@emph{No output warnings}).

@item 
@code{-Werror} (@emph{A warning is consider as an error}).
@end itemize
@end quotation
@end cartouche

@*warning: 
The field is empty per default.


@item 
@strong{CFLAGS:}

You can set the argument to give to the compiler (like -g, -O2,...).

@cartouche
@quotation Note 
The aside button provide few flags adding:


@itemize +

@item 
@code{-g}

@item 
@code{-O[0123gsf]}

@item 
@code{-std=}

@item 
@code{-pedantic}
@end itemize
@end quotation
@end cartouche

@item 
@strong{CPPFLAGS:}

Preprocessor instruction to pass onto the compile command line.

@cartouche
@quotation Note 
The aside button permit you to define a definition with a value or without.
@end quotation
@end cartouche

@item 
@strong{LDFLAGS:}

Dynamic Linker Flags.

@cartouche
@quotation Note 
The aside button will permit you to choose the @code{pkg-config}

you want to add to your project.

By listing all the @code{pkg-config} available on your system.
@end quotation
@end cartouche

@*warning: 
By hand editing, if you use @code{pkg-config}, use the back-ticks syntax:


Else this will not work because of the make syntax.

@item 
@strong{LDLIBS:}

Dynamic Linker library libraries: per example @code{-lm}.

@cartouche
@quotation Note 
The aside button will permit you to add the linker of your choice.

By listing all linker flags available on your system.
@end quotation
@end cartouche
@end itemize

@node Files,Disassembling,C/C++ Compiler settings,Building a mk-project project
@anchor{mk-project_build_a_project files}@anchor{16}
@section Files


Here you must set the extension you will use for the source and header files.

Especially for the @strong{C++} language:


@itemize +

@item 
Source files:


@itemize +

@item 
@emph{.cpp}

@item 
@emph{.CPP}

@item 
@emph{.c++}

@item 
@emph{.C}
@end itemize

@*warning: 
@strong{This is very important} because of the compilation automation which will @strong{not work} with the @strong{wrong extension}.


@item 
Header files:


@itemize +

@item 
@emph{.h}

@item 
@emph{.hh}

@item 
@emph{.H}

@item 
@emph{.hp}

@item 
@emph{.hxx}

@item 
@emph{.hpp}

@item 
@emph{.HPP}

@item 
@emph{.h++}

@item 
@emph{.tcc}
@end itemize
@end itemize

@*note: 
For the @strong{C} language this default to @emph{.c} and @emph{.h}.


@node Disassembling,Profiling,Files,Building a mk-project project
@anchor{mk-project_build_a_project disassembling}@anchor{17}
@section Disassembling


Here you can give the default options to pass to the debugging tools:


@itemize +

@item 
@code{nm} options.

@item 
@code{gdb} options.

@item 
@code{strace} options.

@item 
@code{ltrace} options.

@item 
@code{objdump} options.

@item 
@code{ldd} options.

@item 
@code{gprof} options.
@end itemize

@*note: 
For further informations sea the @ref{18,,mk-project code investigating@comma{} debugging and disassembling page}.


@node Profiling,C/C++ code formatters,Disassembling,Building a mk-project project
@anchor{mk-project_build_a_project profiling}@anchor{19}
@section Profiling


@menu
* Oprofile:: 
* Valgrind:: 

@end menu

@node Oprofile,Valgrind,,Profiling
@anchor{mk-project_build_a_project oprofile}@anchor{1a}
@subsection @code{Oprofile}


@code{mk-project} use @strong{Oprofile} version >= 1.0 for profiling you code.

You can set the following default options:


@itemize +

@item 
@code{operf} options.

@item 
@code{ocount} options.

@item 
@code{opreport} options.

@item 
@code{opannotate} options.

@item 
@code{opgprof} options.
@end itemize

@node Valgrind,,Oprofile,Profiling
@anchor{mk-project_build_a_project valgrind}@anchor{1b}
@subsection @code{Valgrind}


@code{mk-project} provides 4 @code{valgrind} targets per default:

@example
make valgrind-memcheck   # Launch the valgrind memcheck tool on your binary.

make valgrind-cachegrind # Launch the valgrind cachegrind tool on your binary.

make valgrind-callgrind  # Launch the valgrind callgrind tool on your binary.

make valgrind-helgrind   # Launch the valgrind helgrind tool on your binary.
@end example

For this @code{valgrind} targets you can set the options.

@*note: 
You can define more @code{valgrind} targets by @ref{5,,editing the template}.


You can give options to apply to valgrind by setting the environment variable 
@geindex VALGRIND_OPTS
@geindex environment variable; VALGRIND_OPTS
@code{VALGRIND_OPTS}.

@strong{Or} by passing it like this:

@example
$ make valgrind-memcheck VALGRIND_MEMCHECK_OPTS=--option=value

$ make valgrind-cachegrind VALGRIND_CACHEGRIND_OPTS=--option=value

$ make valgrind-callgrind VALGRIND_CALLGRIND_OPTS=--option=value

$ make valgrind-helgrind VALGRIND_HELGRIND_OPTS=--option=value
@end example

@node C/C++ code formatters,Documentation,Profiling,Building a mk-project project
@anchor{mk-project_build_a_project c-c-code-formatters}@anchor{1c}
@section @strong{C}/@strong{C++} code formatters


Here you can choose the code formatter(s) you want to use.


@itemize +

@item 
You can set the options to give to @code{indent} and to @code{astyle} for the @code{indent-user} and @code{astyle-user} target if you know this tools.

@*note: 
But @code{mk-project} provides a lot of pre-configurated @code{astyle}, @code{indent}, @code{bcpp} targets.

@end itemize


@display
@w{ }
@end display




@itemize +

@item 
You can set the @code{indentation width} to use and wether to use tabulation or not during the formatting process.
@end itemize

@*note: 
For further information sea the page: @ref{1d,,mk-project code formatters}


@node Documentation,About informations,C/C++ code formatters,Building a mk-project project
@anchor{mk-project_build_a_project documentation}@anchor{1e}
@section Documentation



@enumerate 

@item 
Simply choose to use @ref{b,,sphinx or not}.

@item 
Set the options according to your sphinx version.

@item 
@emph{Enable}/@emph{Disable} the wanted sphinx extensions.
@end enumerate

@*sphinx: 
This will generate a @code{Makefile} and @code{sphinx} specific targets.


@menu
* man-page:: 

@end menu

@node man-page,,,Documentation
@anchor{mk-project_build_a_project man-page}@anchor{1f}
@subsection man-page


The man page generating is separated from the documentation because they normally

does not contains the same,

so @code{mk-project} provides through the @code{rst2man} tool an option

to build (using the @abbr{ReST,ReStructured Text} syntax) and view a man page.

@node About informations,Others Informations,Documentation,Building a mk-project project
@anchor{mk-project_build_a_project about-informations}@anchor{20}
@section About informations


Here you can set some informations about your program.


@itemize +

@item 
Author(s).

@item 
Mail address.

@item 
Program URL.

@item 
Copyright string.
@end itemize

@*note: 
All this informations will generate some constant definition into the @code{./headers/defines.$@{EXT_HDR@}} file.


@node Others Informations,Licensing,About informations,Building a mk-project project
@anchor{mk-project_build_a_project others-informations}@anchor{21}
@section Others Informations



@itemize +

@item 
Make options: the options to pass to @code{make} at every call.

@item 
The bash location (auto-detect).

@item 
Compression level for the @code{pkg-\*} targets, with which you can build an archive from your project.
@end itemize

@node Licensing,* desktop file,Others Informations,Building a mk-project project
@anchor{mk-project_build_a_project licensing}@anchor{22}
@section Licensing


You can edit a source code files header according to the chosen license.

And add it to every source file with the target:

@code{make prepend-license}.

@node * desktop file,Archiving your project,Licensing,Building a mk-project project
@anchor{mk-project_build_a_project desktop-file}@anchor{23}
@section *.desktop file


You can build a desktop file with this boilerplate.

@node Archiving your project,Summary,* desktop file,Building a mk-project project
@anchor{mk-project_build_a_project archiving-your-project}@anchor{24}
@section Archiving your project


@code{mk-project} provides many compressed archiving targets:


@itemize +

@item 
@code{zip} archive.

@item 
@code{tar} archive compressed with @code{lzma}, @code{xz}, @code{gz}, @code{bz}.

@item 
@code{rar} archive.
@end itemize

If the wanted archive program is installed at your site. What is not oblige.

@*note: 
@code{mk-project} provides through his @abbr{G.U.I} a: Project --> extract and load menu item.


@node Summary,,Archiving your project,Building a mk-project project
@anchor{mk-project_build_a_project summary}@anchor{25}
@section Summary


Last step to complete the generation of your project.

Enjoy the easiness of working with @code{mk-project} the @abbr{T.D.E Terminal Development Environment}.

@menu
* Exporting your settings:: 

@end menu

@node Exporting your settings,,,Summary
@anchor{mk-project_build_a_project exporting-your-settings}@anchor{26}
@subsection Exporting your settings


You can exporting your settings as a @code{mk-project} profile.

To load it by the next project because typing all this options can be painful.

You will get the most wanted settings setted like @code{nm_options} per example,

but not all like the program name.

@*warning: 
The file extension will arbitrary set to @code{*.mkpp}.


@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node Working on an existing mk-project project,mk-project documentation,Building a mk-project project,Top
@anchor{mk-project_current_project doc}@anchor{27}@anchor{mk-project_current_project working-on-an-existing-mk-project-project}@anchor{28}
@chapter Working on an existing @code{mk-project} project


@menu
* Open an mk-project project:: 
* Reconfiguring an existing project:: 
* Adding files to your project:: 

@end menu

@node Open an mk-project project,Reconfiguring an existing project,,Working on an existing mk-project project
@anchor{mk-project_current_project open-an-mk-project-project}@anchor{29}
@section Open an @code{mk-project} project


For opening an existing project you can make use of the @code{*.mkp} file from your project.


@itemize +

@item 
Either by calling @code{mk-project} with the @code{*.mkp} file given as argument:

@example
$ mk-project /path/to/project_folder/prgname.mkp
@end example

Or open the project within @code{mk-project}'s @abbr{G.U.I} (Projects ‣ Load project).

@item 
By using your file manager:

Simply click on the @code{*.mkp} file in the project folder

@strong{or}

Opening the @code{*.mkp} file with your file manager using the @code{open with} option.

To open the @code{mk-project} @abbr{G.U.I} and loading the entire project.

@item 
Using the @code{mk-project} @abbr{G.U.I}:

Use the menu item Projects ‣ Load project and choose the @code{*.mkp} of interest.

To load the entire project in the @code{mk-project} @abbr{G.U.I}
@end itemize

All targets will be available according to your settings.

@cartouche
@quotation Note 
Else you can simply use a terminal to use the @code{mk-project} projects:

simply type @code{make help} in the project folder to sea the available targets.
@end quotation
@end cartouche

@node Reconfiguring an existing project,Adding files to your project,Open an mk-project project,Working on an existing mk-project project
@anchor{mk-project_current_project reconfiguring-an-existing-project}@anchor{2a}
@section Reconfiguring an existing project


Open the @code{mk-project} @abbr{G.U.I} and use the menu item Projects -> Reconfigure project

to open the project reconfiguring project interface.

Here you can:


@itemize +

@item 
@strong{Change} some settings of your project.

@item 
@strong{Enable} or @strong{disable} some features.

@item 
@strong{Edit} the Licensing boilerplate to prepend it to all source and header files if you want to do so.

@item 
@strong{Edit} the desktop file boilerplate.
@end itemize

@node Adding files to your project,,Reconfiguring an existing project,Working on an existing mk-project project
@anchor{mk-project_current_project adding-files-to-your-project}@anchor{2b}
@section Adding files to your project


Open an existing project and then use the menu item Projects -> Add file(s) to project.

Then select the file(s) you want to add to your project.

@cartouche
@quotation Note 
Take care of the checkbutton in the file chooser !


@itemize +

@item 
You can choose to add the corresponding @emph{header} file to your project.

@*note: 
If the header file doesn't exist it will be create.

@end itemize
@end quotation
@end cartouche

@cartouche
@quotation Warning 
The file(s) must be in the @code{./src} folder or subfolders from it !

Take care to organize your project properly so that all source files still in the @code{./src} folder from your project !

Else you can add the file(s) to your project anyway but this can break your project tree if you rename the project folder.

@*note: 
It's better to create sub-folders from the @code{./src} folder to organize your project properly !

@end quotation
@end cartouche

@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node mk-project documentation,mk-project code investigating debugging and disassembling,Working on an existing mk-project project,Top
@anchor{mk-project_documentation mk-project-documentation}@anchor{b}@anchor{mk-project_documentation doc}@anchor{2c}@anchor{mk-project_documentation id1}@anchor{2d}
@chapter @code{mk-project} documentation


@menu
* Introduction:: 
* You are a sphinx user;: You are a sphinx user. 
* You aren't a sphinx user:: 
* mk-project documentation visualize:: 
* mk-project slots:: 
* rst2man:: 

@end menu

@node Introduction,You are a sphinx user,,mk-project documentation
@anchor{mk-project_documentation introduction}@anchor{2e}
@section Introduction


@code{mk-project} currently support only one single documentation generator: @code{sphinx}.

sphinx was first design to generate official python documentation but time has past and @code{sphinx}

has become very popular at first by the python community.

Without any particular extension (like autodoc) @code{sphinx} is based on the R.e.S.T Re Structured Text@footnote{http://docutils.sourceforge.net/docs/user/rst/quickref.html} language but Mardown@footnote{http://markdown-syntax.html} can be used through modifying the @code{conf.py} file.

The Rest language is an easy markup language as like markdown but it is standardized (Markdown not) and can be extented what sphinx does.

@*note: 
Some R.e.S.T Re Structured Text@footnote{http://docutils.sourceforge.net/docs/user/rst/quickref.html} extension permit to build @strong{C} andf @strong{C++} documentation without using any extension.


@node You are a sphinx user,You aren't a sphinx user,Introduction,mk-project documentation
@anchor{mk-project_documentation you-are-a-sphinx-user}@anchor{2f}
@section You are a sphinx user:


So everything is are right.

@node You aren't a sphinx user,mk-project documentation visualize,You are a sphinx user,mk-project documentation
@anchor{mk-project_documentation you-aren-t-a-sphinx-user}@anchor{30}
@section You aren't a sphinx user


Let me convince you to adopt sphinx by learning the easy markup R.e.S.T Re Structured Text@footnote{http://docutils.sourceforge.net/docs/user/rst/quickref.html} or Markdown@footnote{http://markdown-syntax.html}  language.

For generating documentation in many formats, @code{mk-project} generate make targets from the make output according which sphinx extension are installed on your system.

Per exemple currently on my system.

@example
make sphinx-html # to make standalone HTML files

make sphinx-dirhtml # to make HTML files named index.html in directories

make sphinx-singlehtml # to make a single large HTML file

make sphinx-pickle # to make pickle files

make sphinx-json # to make JSON files

make sphinx-htmlhelp # to make HTML files and an HTML help project

make sphinx-qthelp # to make HTML files and a qthelp project

make sphinx-applehelp # to make an Apple Help Book

make sphinx-devhelp # to make HTML files and a Devhelp project

make sphinx-epub # to make an epub

make sphinx-epub3 # to make an epub3

make sphinx-latex # to make LaTeX files, you can set PAPER=a4 or PAPER=letter

make sphinx-latexpdf # to make LaTeX files and run them through pdflatex

make sphinx-latexpdfja # to make LaTeX files and run them through platex/dvipdfmx

make sphinx-lualatexpdf # to make LaTeX files and run them through lualatex

make sphinx-xelatexpdf # to make LaTeX files and run them through xelatex

make sphinx-text # to make text files

make sphinx-man # to make manual pages

make sphinx-texinfo # to make Texinfo files

make sphinx-info # to make Texinfo files and run them through makeinfo

make sphinx-gettext # to make PO message catalogs

make sphinx-changes # to make an overview of all changed/added/deprecated items

make sphinx-xml # to make Docutils-native XML files

make sphinx-pseudoxml # to make pseudoxml-XML files for display purposes

make sphinx-linkcheck # to check all external links for integrity

make sphinx-doctest # to run all doctests embedded in the documentation (if enabled)

make sphinx-coverage # to run coverage check of the documentation (if enabled)
@end example

@c # Output on my mk-project :program:`make` ``help`` target.


@itemize +

@item 
Many themes are available.

@item 
Many contrib packages are available for extending sphinx in many ways.

@item 
The @abbr{rdt,Read The Doc} theme provide a web service, format the output in his theme and provide the documentation downloadable in many format.
@end itemize

@node mk-project documentation visualize,mk-project slots,You aren't a sphinx user,mk-project documentation
@anchor{mk-project_documentation mk-project-documentation-visualize}@anchor{31}
@section @code{mk-project} documentation visualize


@code{mk-project} permit you to visualize all the output files in different manners:

@code{mk-project} will search severals documentation viewer programs on your installation.

@cartouche
@quotation Note 

@itemize *

@item 
The @code{make} varibale @code{$@{BROWSER@}} will link to your @code{browser}.

@item 
The @code{make} variable @code{@{INFO@}} will link to the @code{info} program.

@item 
The @code{make} variable @code{@{MAN@}} will link to the @code{man} program.

@item 
The @code{make} variable @code{@{EPUB@}} will link to your @code{epub} viewer (@code{fbreader} or @code{okular}) if available.

@item 
The @code{make} variable @code{@{PDF@}} will link to your @code{pdf} viewer if available.
@end itemize

@*note: 
If @code{mk-project} doesn't find a binary for viewing a file it will use the @code{xdg-open} program as fallback.

@end quotation
@end cartouche

@cartouche
@quotation Warning 
The @code{sphinx-show-\*} targets are set @emph{arbitrary}

@strong{as best as I can}

because their is either @strong{no} way to know into which @code{sub-folder} the @strong{documentation} will be @strong{generate}

and @strong{nor} the @strong{filename the documentation will have}...

Simply @strong{trust me} or correct it @strong{yourself} if necessary.
@end quotation
@end cartouche

@node mk-project slots,rst2man,mk-project documentation visualize,mk-project documentation
@anchor{mk-project_documentation mk-project-slots}@anchor{32}
@section @code{mk-project} slots


Always remember that you can write some @code{make} targets into the @code{mk-project} Makefile.

To ease you the documentation generating process and so @ref{5,,extend mk-project}.

Per example by the first version of mk-project, it use a mix of:


@itemize *

@item 
The @code{pandoc} package.

@item 
The @code{python(3)-docutils} and the @code{rst2pdf} packages.

@item 
The @code{texinfo} and @code{texlive} packages.
@end itemize

To provide ReST, Markdown and texinfo documentation generation but Only one page per output format.

@strong{but} I used @code{sphinx} to write the documentation of the version 1.0 of @code{mk-project}

with some few self -builded targets like this:

@example
################################################################################

# sphinx slot.

.PHONY: sphinx-singlehtml sphinx-html sphinx-htmlhelp sphinx-epub sphinx-info sphinx-man

# sphinx Makefile singlehtml target link.
sphinx-singlehtml:
      cd sphinx_doc ; $@{MAKE@} singlehtml ;

# sphinx Makefile html target link.
sphinx-html:
      cd sphinx_doc ; $@{MAKE@} html ;

# sphinx Makefile epub target link.
sphinx-epub:
      cd sphinx_doc ; $@{MAKE@} epub ;

# sphinx Makefile info target link.
sphinx-info:
      cd sphinx_doc ; $@{MAKE@} info ;

# sphinx Makefile man target link.
sphinx-man:
      cd sphinx_doc ; $@{MAKE@} man ;

# sphinx Makefile doctest target link.
sphinx-doctest:
      cd sphinx_doc ; $@{MAKE@} doctest


# sphinx builded files showing targets.
.PHONY: sphinx-show-singlehtml sphinx-show-html sphinx-show-epub sphinx-show-info sphinx-show-man

sphinx-show-singlehtml:
      cd ./sphinx_doc/build/singlehtml ; $@{BROWSER@} index.html ;

sphinx-show-html:
      cd ./sphinx_doc/build/html ; $@{BROWSER@} index.html ;

sphinx-show-epub:
      cd ./sphinx_doc/build/epub  ; $@{EPUB@} *.epub ;

sphinx-show-info:
      cd ./sphinx_doc/build/texinfo ; $@{INFO@} -f *.info ;

sphinx-show-man:
      cd ./sphinx_doc/build/man ; $@{MAN@} -f $@{PRGNAME@}.$@{MAN_LEVEL@} ;

# sphinx clean target.
sphinx-clean:
      cd sphinx_doc ; cd build ; rm -R * ;

################################################################################
@end example

@node rst2man,,mk-project slots,mk-project documentation
@anchor{mk-project_documentation rst2man}@anchor{33}
@section @code{rst2man}


If you get the program @code{rst2man} installed on your system,

@code{mk-project} will create a folder named @code{rst2man} into the project tree into

which you will find a file @code{$@{PRGNAME@}.rst} to edit a man-page with @code{rst2man}.

@*warning: 
Because the man-page is often apart from the documentation.


@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node mk-project code investigating debugging and disassembling,mk-project code formatters,mk-project documentation,Top
@anchor{mk-project_debugging mk-project-debugging}@anchor{18}@anchor{mk-project_debugging doc}@anchor{34}@anchor{mk-project_debugging mk-project-code-investigating-debugging-and-disassembling}@anchor{35}
@chapter @code{mk-project} code investigating, debugging and disassembling


@menu
* Introduction: Introduction<2>. 
* The make info target:: 
* The make gdb target:: 
* The make ldd target:: 
* The make nm target:: 
* The make objdump target:: 
* The make strace target:: 
* The make ltrace target:: 
* The make strip target:: 
* Oprofile targets:: 
* Valgrind targets:: 
* Alternative to *_OPTS:: 
* Documentation Source:: 

@end menu

@node Introduction<2>,The make info target,,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging introduction}@anchor{36}
@section Introduction


You want to investigate in deep your binary cause of it bugs or simply per curiosity.

@code{mk-project} provide a lot of targets which will make your investigation easier.

@node The make info target,The make gdb target,Introduction<2>,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-info-target}@anchor{37}
@section The @code{make info} target


The @code{make info} target display simple informations about your program.

Using the @code{file}, @code{size}, @code{ls -s -h} utilities.

@menu
* The file utility:: 
* The size utility:: 

@end menu

@node The file utility,The size utility,,The make info target
@anchor{mk-project_debugging the-file-utility}@anchor{38}
@subsection The @code{file} utility


The @code{file} utility print out the details about any file-type.

So if an executable file is given, the @code{file} utility will display informations about it.

@node The size utility,,The file utility,The make info target
@anchor{mk-project_debugging the-size-utility}@anchor{39}
@subsection The @code{size} utility


The @code{size} utility print out the byte length of the main binary components:

@code{.text}, @code{.data} and @code{.bss}.

@node The make gdb target,The make ldd target,The make info target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-gdb-target}@anchor{3a}
@section The @code{make gdb} target


At first you can use the famous @code{GNU/Debugger} @code{gdb} for investigating your program,

by simply launching the target @code{make gdb}.

This will launch @code{gdb} in the @strong{./bin} folder where your binary is located

with your program as argument.

@cartouche
@quotation Note 
Given options to @code{gdb}:

For given supplementary options to gdb, which will be passed to @code{gdb} at every target call, edit the @code{GDB_OPTS} variable.

Else if you want to change the options for a unique call of @code{gdb}, by using the target.

Simply set the wanted options into the @code{GDB_OPTS} variable on the command line:

@example
$ make gdb GDB_OPTS="--option value"
@end example
@end quotation
@end cartouche

@node The make ldd target,The make nm target,The make gdb target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-ldd-target}@anchor{3b}
@section The @code{make ldd} target


The @code{ldd} utility show the complete list of dynamic libraries which your program will try to load (i.e. @emph{The load time dependencies}).

@cartouche
@quotation Note 
Given options to @code{ldd}:

For given supplementary options to @code{ldd}, which will be passed to @code{ldd} at every target call, edit the @code{LDD_OPTS} variable.

Else if you want to change the options for a unique call of @code{ldd}, by using the target.

Simply set the wanted options into the @code{LDD_OPTS} variable on the command line:

@example
$ make ldd LDD_OPTS="--option value"
@end example
@end quotation
@end cartouche

@cartouche
@quotation Warning 
Limitations of ldd:


@itemize *

@item 
@code{ldd} cannot identify the libraries dynamically loaded at runtime using @code{dlopen()}.
@end itemize

@example
Be aware, however, that in some circumstances, some version of ldd may attempt to obtain the dependencies informations
by directly executing the program. Thus, you should never employ ldd on untrusted executables,
since this may result in the execution of arbitrary code.
@end example

A safer alternative when dealing with untrusted executables is following:

@example
$ objdump -p /path/to/binary | grep NEEDED

# The same result result can be achieve using the readelf utility.

$ readelf -d /path/to/binary | grep NEEDED
@end example
@end quotation
@end cartouche

@node The make nm target,The make objdump target,The make ldd target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-nm-target}@anchor{3c}
@section The @code{make nm} target


The @code{nm} utility is used to list the symbols of a binary or object file(s).

It can also find the indicated symbol type.

@cartouche
@quotation Note 
Given options to @code{nm}:

For given supplementary options to @code{nm}, which will be passed to @code{nm} at every target call, edit the @code{NM_OPTS} variable.

Else if you want to change the options for a unique call of @code{nm}, by using the target.

Simply set the wanted options into the @code{NM_OPTS} variable on the command line:

@example
$ make nm NM_OPTS="--option value"
@end example
@end quotation
@end cartouche

@*note: 
You can give the @code{$(OBJECT)} @code{make} variable as argument to @code{nm} instead of the binary.


@cartouche
@quotation Note 
If the binary contains some @strong{C++} code, the symbols are printed by default in mangled form.
@end quotation
@end cartouche

Usage examples:

@example
$ nm /path/to/prg

# List all symbols of prg (a binary or object file(s)).

$ nm -D /path/to/prg

# List only the symbols contains into the dynamic section(s) (exported or visible).

$ nm -C /path/to/prg

# List symbols in demangled form.

$ nm -D --no-demangle /path/to/prg

# List symbols in not demangled form.

$ nm -u /path/to/prg

# List undefined symbols.
@end example

Look at The 20 best nm commands@footnote{http://www.thegeekstuff.com/2012/03/linux-nm-command}

@node The make objdump target,The make strace target,The make nm target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-objdump-target}@anchor{3d}
@section The @code{make objdump} target


@code{objdump} is one of the most versatile utility program, so it can support about 50 others binary formats other than the ELF format.

@cartouche
@quotation Note 
Given options to @code{objdump}:

For given supplementary options to @code{objdump}, which will be passed to @code{objdump} at every target call, edit the @code{OBJDUMP_OPTS} variable.

Else if you want to change the options for a unique call of @code{objdump}, by using the target.

Simply set the wanted options into the @code{OBJDUMP_OPTS} variable on the command line:

@example
$ make objdump OBJDUMP_OPTS="--option value"
@end example
@end quotation
@end cartouche

@*note: 
You can give the @code{$(OBJECT)} @code{make} variable as argument to @code{objdump} instead of the binary.


Usage examples:

@example
$ objdump -f /path/to/prg

# Is used to obtain an insight into the object file(s) header.
# The header provide plenty of informations like
#
# * binary type
# * entry point (The start of the .text section)
# * etc..

$ objdump -h /path/to/prg

# Is used to list the available sections from the prg.

$ objdump -T /path/to/prg

# List dynamic symbols only.

# Is equivalent to running: $ nm -D /path/to/prg

$ objdump -t /path/to/prg

# Examines the dynamic section(s).

$ objdump -R /path/to/prg

# Examines the relocation section(s).

$ objdump -S -j <section name> /path/to/prg

# Provide the hex-dump of the values carried by the given section.

$ objdump -p /path/to/prg

# Display informations about the ELF binary segments.
@end example

Usage example for code disassembling using @code{objdump}:

@example
$ objdump -d -M intel /path/to/prg

# Used to disassemble a binary using the Intel syntax.

$ objdump -d -S -M intel /path/to/prg

# Like above but interspercing the original source code.

$ objdump -d -M intel -j <section name> /path/to/prg

# This only works if the binary is compiled with the -g (debugging) option.
@end example

@node The make strace target,The make ltrace target,The make objdump target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-strace-target}@anchor{3e}
@section The @code{make strace} target


The @code{strace} utility tracks down the @strong{system calls} made by the @strong{process} as well as the @strong{signals} received by the @strong{process}.

@cartouche
@quotation Note 
Given options to @code{strace}:

For given supplementary options to strace, which will be passed to @code{strace} at every target call, edit the @code{STRACE_OPTS} variable.

Else if you want to change the options for a unique call of @code{strace}, by using the target.

Simply set the wanted options into the @code{STRACE_OPTS} variable on the command line:

@example
$ make strace STRACE_OPTS="--option value"
@end example
@end quotation
@end cartouche

@node The make ltrace target,The make strip target,The make strace target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-ltrace-target}@anchor{3f}
@section The @code{make ltrace} target


The @code{ltrace} utility tracks down the @strong{libraries calls} made by the @strong{process}.

@cartouche
@quotation Note 
Given options to @code{ltrace}:

For given supplementary options to ltrace, which will be passed to @code{ltrace} at every target call, edit the @code{LTRACE_OPTS} variable.

Else if you want to change the options for a unique call of @code{ltrace}, by using the target.

Simply set the wanted options into the @code{LTRACE_OPTS} variable on the command line:

@example
$ make ltrace LTRACE_OPTS="--option value"
@end example
@end quotation
@end cartouche

@node The make strip target,Oprofile targets,The make ltrace target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging the-make-strip-target}@anchor{40}
@section The @code{make strip} target


The @code{strip} utility can be used to eliminated all the symbols not needed in the process.

@cartouche
@quotation Note 
Given options to @code{strip}:

For given supplementary options to strip, which will be passed to @code{strip} at every target call, edit the @code{STRIP_OPTS} variable.

Else if you want to change the options for a unique call of @code{strip}, by using the target.

Simply set the wanted options into the @code{STRIP_OPTS} variable on the command line:

@example
$ make strip STRIP_OPTS="--option value"
@end example
@end quotation
@end cartouche

@node Oprofile targets,Valgrind targets,The make strip target,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging oprofile-targets}@anchor{41}
@section Oprofile targets


The program collection Oprofile is a profiling system for systems running Linux 2.6.31 and greater.

OProfile makes use of the hardware performance  counters  provided  on  Intel,  AMD,  and  other processors.

OProfile can profile a selected program or process or the whole system.

OProfile can also  be used to collect cumulative event counts at the application, process, or system level.

Begin to show at:

@quotation

@example
$ man Oprofile

$ ophelp
@end example
@end quotation

@code{ophelp} lists the available performance counter options.

If you give it a symbolic event name, it will return  the  hardware  value (e.g. "ophelp DATA_MEM_REFS").

@*note: 
@code{mk-project} use the version >= 1.0 of Oprofile.


And the available Oprofile programs are:


@itemize *

@item 
@code{operf}

@item 
@code{ocount}

@item 
@code{opreport}

@item 
@code{opannotate}

@item 
@code{oparchive}

@item 
@code{opgprof}
@end itemize

@code{mk-project} provides wrapper around this programs except @code{oparchive}.

Simply remember that operf and @code{ocount} generate a @code{profile_specification}.

And the other are done to interpret the datas.

@*warning: 
You must run this programs as root.


@node Valgrind targets,Alternative to *_OPTS,Oprofile targets,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging valgrind-targets}@anchor{42}
@section Valgrind targets


If valgrind is present on your system @code{mk-project} provide you 4 targets for the most common usage of valgrind:

@example
make valgrind-memcheck   # Launch the valgrind memcheck tool on your binary.

make valgrind-cachegrind # Launch the valgrind cachegrind tool on your binary.

make valgrind-callgrind  # Launch the valgrind callgrind tool on your binary.

make valgrind-helgrind   # Launch the valgrind helgrind tool on your binary.
@end example

For every target you can set at creating the project or changing at reconfiguring your project the wanted options.

@cartouche
@quotation Note 
Fell free @ref{5,,to edit the template to set your prefered options in hard coded}.

Or set the environment variable 
@geindex $VALGRIND_OPTS
@geindex environment variable; $VALGRIND_OPTS
@code{$VALGRIND_OPTS}.
@end quotation
@end cartouche

@node Alternative to *_OPTS,Documentation Source,Valgrind targets,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging alternative-to-opts}@anchor{43}
@section Alternative to *_OPTS


@*note: 
You can @strong{export} @code{*_OPTS} the corresponding variable before launching the @code{make} target.


@node Documentation Source,,Alternative to *_OPTS,mk-project code investigating debugging and disassembling
@anchor{mk-project_debugging documentation-source}@anchor{44}
@section Documentation Source



@itemize +

@item 
@code{GNU Make manual} (A very good manual from the GNU manuals serie).
@end itemize

@*authors: 
Stallman, McGrath, Smith.



@itemize +

@item 
@code{C/C++ Compiling} (A very good book about libraries and machine code investigation).
@end itemize

@*author: 
Milan Stevanovic.


@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node mk-project code formatters,mk-project contributing advices,mk-project code investigating debugging and disassembling,Top
@anchor{mk-project_code_formatting mk-project-code-formatters}@anchor{45}@anchor{mk-project_code_formatting code-formatters}@anchor{1d}@anchor{mk-project_code_formatting doc}@anchor{46}
@chapter @strong{mk-project} code formatters


@menu
* Introduction: Introduction<3>. 
* Using the indent utility:: 
* Using the astyle utility:: 

@end menu

@node Introduction<3>,Using the indent utility,,mk-project code formatters
@anchor{mk-project_code_formatting introduction}@anchor{47}
@section Introduction


@strong{mk-project} provide severals utilities with many predefined targets for formatting your source code.

@menu
* For C or C++ source code;: For C or C++ source code. 

@end menu

@node For C or C++ source code,,,Introduction<3>
@anchor{mk-project_code_formatting for-c-or-c-source-code}@anchor{48}
@subsection For @strong{C} or @strong{C++} source code:



@itemize *

@item 
@code{indent}

@item 
@code{astyle}

@item 
@code{bcpp}
@end itemize

@node Using the indent utility,Using the astyle utility,Introduction<3>,mk-project code formatters
@anchor{mk-project_code_formatting using-the-indent-utility}@anchor{49}
@section Using the @code{indent} utility


@strong{mk-project} provide following predefined indent styles:

@example
make indent-kr    # Format all source files in the kr style.
make indent-gnu   # Format all source files in the gnu style.
make indent-linux # Format all source files in the linux style.
make indent-orig  # Format all source files in the original style.
make indent-user  # Format all source files in the user defined style.

make indent-clean # Remove all formatted files with suffix.
@end example

@*note: 
The @code{indent-user} target use the given options during the project configuration for formatting your source code.


@cartouche
@quotation Note 
By launching any code formatting target @strong{mk-project} will output a copy of all your source files suffixed with the corresponding target name:

Per example by using the @code{indent-kr} target a file named @code{main.c} will ouput as @code{main-kr.c}.

For overwriting your source files really you must set the @code{make} variable @code{OVERWRITE} on the value @strong{T}.

@example
$ make indent-kr OVERWRITE=T
@end example
@end quotation
@end cartouche

@node Using the astyle utility,,Using the indent utility,mk-project code formatters
@anchor{mk-project_code_formatting using-the-astyle-utility}@anchor{4a}
@section Using the @code{astyle} utility


@strong{mk-project} provide following predefined indent styles:

@example
make astyle-ansi          # Format all source files in the ansi style.
make astyle-java          # Format all source files in the java style.
make astyle-kr            # Format all source files in the kr style.
make astyle-stroustrup    # Format all source files in the stroustrup style.
make astyle-whitesmith    # Format all source files in the whitesmith style.
make astyle-banner        # Format all source files in the banner style.
make astyle-gnu           # Format all source files in the gnu style.
make astyle-linux         # Format all source files in the linux style.
make astyle-horstmann     # Format all source files in the horstmann style.
make astyle-lisp          # Format all source files in the lisp style.
make astyle-pico          # Format all source files in the pico style.
make astyle-python        # Format all source files in the python style.
make astyle-user          # Format all source files in the user defined style.

make astyle-clean         # Remove all formatted files with suffix.
@end example

@*note: 
The @code{astyle-user} target use the given options during the project configuration for formatting your source code.


@cartouche
@quotation Note 
By launching any code formatting target @strong{mk-project} will output a copy of all your source files suffixed with the corresponding target name:

Per example by using the @code{astyle-kr} target a file named @code{main.c} will ouput as @code{main-kr.c}.

For overwriting your source files really you must set the @code{make} variable @code{OVERWRITE} on the value @strong{T}.

@example
$ make astyle-kr OVERWRITE=T
@end example
@end quotation
@end cartouche

@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node mk-project contributing advices,* todo or * tdo file format specifications,mk-project code formatters,Top
@anchor{mk-project_participating mk-project-participating}@anchor{a}@anchor{mk-project_participating doc}@anchor{4b}@anchor{mk-project_participating mk-project-contributing-advices}@anchor{4c}
@chapter @code{mk-project} contributing advices


@menu
* mk-project zen:: 
* How contibute ?:: 
* Makefile: Makefile<2>. 
* code formatters:: 

@end menu

@node mk-project zen,How contibute ?,,mk-project contributing advices
@anchor{mk-project_participating mk-project-zen}@anchor{4d}
@section mk-project zen


@quotation

mk-project zen is simple:

@example
The minimum work for the user.

The maximum configuration possiblities.

+ Minimum informations asking to the user, maximum deduced.

+ Maximum possibilities, with a minimum informations and binaries.

Bring the maximum with the minimum.

! No package is obligatory except the coreutils
  and them needed by the programming language.
@end example
@end quotation

@node How contibute ?,Makefile<2>,mk-project zen,mk-project contributing advices
@anchor{mk-project_participating how-contibute}@anchor{4e}
@section How contibute ?


@quotation

Write a project for a programming language which isn't done, or enhance one.

Write some useful @code{make} targets for any purpose you want.

Write @code{make} targets forn your well know documentation generators, for @code{mk-project}.

Every help is welcome, thanks.
@end quotation

@menu
* For writing a new project;: For writing a new project. 
* Makefile:: 
* Scripting:: 
* Becoming:: 
* NOTES:: 

@end menu

@node For writing a new project,Makefile,,How contibute ?
@anchor{mk-project_participating for-writing-a-new-project}@anchor{4f}
@subsection For writing a new project:


@quotation


@enumerate 

@item 
Simply fork the project.

@item 
Make a folder named @code{lang_mk-project} (per example:
perl_mk-project).

@item 
Put your stuff inside this folder.

@item 
And ask for merging.
@end enumerate

After your submission your project will be a mimimum tested and they is no matter of refusement only enhancement.
@end quotation

@node Makefile,Scripting,For writing a new project,How contibute ?
@anchor{mk-project_participating makefile}@anchor{50}
@subsection Makefile


@quotation

You can take the included makefiles (@code{./.SubMakefiles/*.mk})

To put it into your project, this is highly recommanded, @strong{don't reinvent the wheel}.

We want targets for:


@itemize -

@item 
Executing the source.

@item 
debugging the source.

@item 
profiling the source.

@item 
And what you want else...
@end itemize
@end quotation

@node Scripting,Becoming,Makefile,How contibute ?
@anchor{mk-project_participating scripting}@anchor{51}
@subsection Scripting


@quotation

We script into @strong{bash} or @strong{python} (the script must be compatible with @strong{python2} and @strong{python3}).

Or if your project is about a scripting language you can use this language.

@*warning: 
Think to modify the script @code{prepend_license.py} to adapt the comment sign from your language


@example
It's easy even if you don't know python or

in the worse case i will do this for you.
@end example

Scripts are set into the @code{./.scripts} folder.
@end quotation

@node Becoming,NOTES,Scripting,How contibute ?
@anchor{mk-project_participating becoming}@anchor{52}
@subsection Becoming


@quotation

If you create a @strong{Makefile} project you become a @strong{coauthor} of @code{mk-project}

If you enhance a project you become a @strong{contributor} of @code{mk-project}

So if you submit a project for your well know language(s),

you will take first the benefit to get a @strong{Project done} for @strong{your programming language}.

And the proudness to contribute to @code{mk-project}

@*note: 
I will ensure the updating of the GUI at every new project adding.

@end quotation

@node NOTES,,Becoming,How contibute ?
@anchor{mk-project_participating notes}@anchor{53}
@subsection NOTES


@quotation

If you write the Makefile for your language, think at writing a minimal example project who writes

@code{hello world welcome to mk-project}

on @code{stdout}.

You can enhance your project with everything you want like the debugging definition in the C/C++ language,

and write entire module(s) for the project purpose.
@end quotation

@node Makefile<2>,code formatters,How contibute ?,mk-project contributing advices
@anchor{mk-project_participating id1}@anchor{54}
@section Makefile


@menu
* BINARIES:: 
* VARIABLES:: 
* Files: Files<2>. 
* FILES and FILEPATH:: 
* LIBRARIES:: 
* TARGETS:: 
* ADVICES:: 

@end menu

@node BINARIES,VARIABLES,,Makefile<2>
@anchor{mk-project_participating binaries}@anchor{55}
@subsection BINARIES


@quotation


@itemize -

@item 
Verify the presence of the binary using the function
@strong{BINARY_EXIST}.

@item 
@strong{UPPERCASE} the binary variable name for no confusion.

@example
BINARY = $@{call BINARY_EXIST, binary@}
@end example

@item 
test if binary installed with:

@example
# Compare the $@{BINARY@} variable with an empty string.
ifneq ($@{BINARY@}, )
# do work...
endif
@end example
@end itemize

@*note: 
Binaries test are in file @code{./.SubMakefiles/binary_checks.mk}

@end quotation

@node VARIABLES,Files<2>,BINARIES,Makefile<2>
@anchor{mk-project_participating variables}@anchor{56}
@subsection VARIABLES


@quotation


@itemize -

@item 
Make the same for configuration:


@itemize -

@item 
use @strong{T} for @strong{TRUE}

@item 
use @strong{F} for @strong{FALSE}
@end itemize

@example
# No comment on following line and remove trailing spaces.
OVERWRITE = T

# Compare the $@{OVERWRITE@} variable with T (don't insert  a space).
ifeq ($@{OVERWRITE@},T)
# Do work...
else
# Do work...
endif
@end example

The configuration options set or select by the user must be at the
top of the Makefile,

with a default value.

And you must inform me about in the goal to update the GUI properly.

@item 
Use the assigments operators cleverly:
@end itemize

@quotation

@example
# define var     value  # Value definition (used for multiline).
# define var =   value  # indirect. (the value change at the next assignment for the final variable value.)
# define var :=  value  # direct.   (the value doesn't change at the next assignment for the final variable value.)
# define var ::= value  # retro and inter compatibility with other make tools.
# define var +=  value  # increment assignment operator.
# define var ?=  value  # shell expansion operator.
@end example
@end quotation


@itemize -

@item 
Use the increment operator ( @strong{+=} ) cleverly so that the user can
define the variable on the command-line.
@end itemize

@quotation

@example
USE_TABS += -t
@end example

Or @strong{not}:

@example
   override MY_VAR = value

#
@end example
@end quotation

@*note: 
Take care by inserting comments some settings doesn't support comments on the same line as the variable.

@end quotation

@node Files<2>,FILES and FILEPATH,VARIABLES,Makefile<2>
@anchor{mk-project_participating files}@anchor{57}
@subsection Files


@quotation

You can verify if a file exist or if it's generated by using the function @strong{FILE_EXIST}

@example
MY_FILE = $@{call FILE_EXIST, /path/to/my_file.ext@}
@end example

It will return @strong{T} (TRUE) or @strong{F} (FALSE) if the file exist or not.
@end quotation

@node FILES and FILEPATH,LIBRARIES,Files<2>,Makefile<2>
@anchor{mk-project_participating files-and-filepath}@anchor{58}
@subsection FILES and FILEPATH


@quotation


@itemize -

@item 
First define all path relativ, included Makefiles are at the same position as the main Makefile.

@item 
Define a variable for the @strong{FILEPATH} and for the @strong{FILE}.

@example
MY_FILEPATH = ./filepath/...

MY_FILE = $@{MY_FILEPATH@}/my_file.txt
@end example

We construct the filepath relativ to the main Makefile: (./Makefile)
@end itemize

@*note: 
Filepath are defined in file @code{./.SubMakefiles/path.mk}



@itemize -

@item 
You can (not obligatory) put the extension in a variable, if this
make sens.

@example
EXT_TYPE = .type

MY_FILE = $@{MY_FILEPATH@}/$@{FILE@}$@{EXT_TYPE@}
@end example

@item 
You can use the make function @strong{FILE_EXIST} to verify the presence
of a file.

@example
MY_FILE = $@{call FILE_EXIST, my_file@}
@end example
@end itemize

@*note: 
The included Makefiles are correctly named and end in the extension *.mk so that an editor can reconize them.


@*note: 
The included Makefiles are set in the SubMakefiles folder.

@end quotation

@node LIBRARIES,TARGETS,FILES and FILEPATH,Makefile<2>
@anchor{mk-project_participating libraries}@anchor{59}
@subsection LIBRARIES


@quotation

Today most of the libraries use the program @code{pkg-config} which you can use to auto-detect the

presence of a library.

By using the @strong{PKG_CONFIG_EXIST} function.

@example
HAS_LIB_PC =  $@{call PKG_CONFIG_EXIST, thelibpc@}
@end example

It will return @strong{T} (TRUE) or @strong{F} (FALSE) in relationship of the presence of a *.pc file for @code{thelibpc}.
@end quotation

@node TARGETS,ADVICES,LIBRARIES,Makefile<2>
@anchor{mk-project_participating targets}@anchor{5a}
@subsection TARGETS


@quotation

If you need to compose some targets names from more than a word, separate them by:


@itemize -

@item 
A @strong{'-'} (@emph{minus}) if it's a @strong{user-target}.

@item 
A @strong{'_'} (@emph{underscore}) if it's an @strong{intern_target}.

Which can be put together with others intern targets to form a @strong{user-target}.
@end itemize

@*note: 
Don't forget the @code{.PHONY:} definition if the target has no depdending targets.

@end quotation

@node ADVICES,,TARGETS,Makefile<2>
@anchor{mk-project_participating advices}@anchor{5b}
@subsection ADVICES


@quotation

@strong{IMPORTANT:} make doesn't support trailing spaces, so strip them.

You can use the following command

@example
$ sed -i 's/[[:space:]]$//' filepath
@end example
@end quotation

@node code formatters,,Makefile<2>,mk-project contributing advices
@anchor{mk-project_participating code-formatters}@anchor{5c}
@section code formatters


@quotation

We can make usages of following utilities, for code formatting in severals languages:
@end quotation

@menu
* C:: 
* C++:: 
* HTML:: 
* CSS:: 
* Javascipt:: 
* Perl:: 
* PHP:: 
* Ruby:: 
* XML:: 
* Using a code formatter:: 

@end menu

@node C,C++,,code formatters
@anchor{mk-project_participating c}@anchor{5d}
@subsection C


@quotation


@itemize +

@item 
@code{indent} (checked).

@item 
@code{astyle} (checked).

@item 
@code{bcpp} (checked).

@item 
@code{uncrustify} (not check, help me !).
@end itemize
@end quotation

@node C++,HTML,C,code formatters
@anchor{mk-project_participating id2}@anchor{5e}
@subsection C++


@quotation


@itemize +

@item 
@code{indent} (checked).

@item 
@code{astyle} (checked).

@item 
@code{bcpp} (checked).

@item 
@code{uncrustify} (not check, help me !).
@end itemize
@end quotation

@*note: 
Must check if we can use this scripts by the @code{universalindentgui} authors or the tools author(s).


@node HTML,CSS,C++,code formatters
@anchor{mk-project_participating html}@anchor{5f}
@subsection HTML


@quotation


@itemize +

@item 
@code{tidy} (not checked).
@end itemize
@end quotation

@node CSS,Javascipt,HTML,code formatters
@anchor{mk-project_participating css}@anchor{60}
@subsection CSS


@quotation


@itemize +

@item 
@code{csstidy} (not checked).
@end itemize
@end quotation

@node Javascipt,Perl,CSS,code formatters
@anchor{mk-project_participating javascipt}@anchor{61}
@subsection Javascipt


@quotation


@itemize +

@item 
@code{JsDecoder.js} (not checked).
@end itemize
@end quotation

@*note: 
Must check if we can use this scripts by the @code{universalindentgui} authors or the tools author(s).


@node Perl,PHP,Javascipt,code formatters
@anchor{mk-project_participating perl}@anchor{62}
@subsection Perl


@quotation


@itemize +

@item 
@code{perltidy} (not checked).
@end itemize
@end quotation

@node PHP,Ruby,Perl,code formatters
@anchor{mk-project_participating php}@anchor{63}
@subsection PHP


@quotation


@itemize +

@item 
@code{phpStylist.php} (not checked).
@end itemize
@end quotation

@*note: 
Must check if we can use this scripts by the @code{universalindentgui} authors or the tools author(s).


@node Ruby,XML,PHP,code formatters
@anchor{mk-project_participating ruby}@anchor{64}
@subsection Ruby


@quotation


@itemize +

@item 
@code{rbeautify.rb} (not checked).

@item 
@code{ruby_formatter.rb} (not checked).
@end itemize
@end quotation

@*note: 
Must check if we can use this scripts by the @code{universalindentgui} authors or the tools author(s).


@node XML,Using a code formatter,Ruby,code formatters
@anchor{mk-project_participating xml}@anchor{65}
@subsection XML


@quotation


@itemize +

@item 
@code{xmlindent} (not checked).
@end itemize
@end quotation

@node Using a code formatter,,XML,code formatters
@anchor{mk-project_participating using-a-code-formatter}@anchor{66}
@subsection Using a code formatter


@quotation

The usage of a code formatter must be user defined controlled so that:


@enumerate 

@item 
We ask the user if he wants to use it.

@item 
We make his usage conditionnaly in the corresponding Makefile: @code{./.SubMakefiles/code_formatter.mk}.
@end enumerate

@quotation

By using a variable named @code{USE_(TOOL NAME UPPERCASE)} given the value:


@itemize *

@item 
@strong{T} for @code{true} or

@item 
@strong{F} for @code{false}.
@end itemize

According the user settings.
@end quotation
@end quotation

@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node * todo or * tdo file format specifications,About mk-project,mk-project contributing advices,Top
@anchor{mk-project_todo_file_specifications todo-or-tdo-file-format-specifications}@anchor{67}@anchor{mk-project_todo_file_specifications doc}@anchor{68}
@chapter @strong{*.todo} or @strong{*.tdo} file format specifications:


The *.todo specification give you a advice structure

of how structuring an TODO file for efficiently tasks

organizing, and so don't forget ideas or things which

you may have to do in the future for the development

of projects of any professional fields where tasks

must be organized and be accomplished in an certain

order.

@menu
* Markup syntax:: 
* Markup Types:: 
* Priority_level:: 
* TASK_ORDER:: 
* Advices:: 
* Syntax of *.todo file(s) content: Syntax of * todo file s content. 
* End word of specifications of the *.todo file(s) format: End word of specifications of the * todo file s format. 
* Example of a *.todo file;: Example of a * todo file. 
* License:: 

@end menu

@node Markup syntax,Markup Types,,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications markup-syntax}@anchor{69}
@section Markup syntax


@strong{Syntax of a mark:} @code{[UPPERCASE :Capitalize: <digits>]}

@strong{Syntax of end mark:} @code{[/UPPERCASE] # The end mark is good for reread his todo note.}

An entire @strong{*.todo} file entry can be represent like this:

@example
=================
TITLE OF DOCUMENT
=================

[TYPE :Priority_level: <TASK_ORDER>] Title of todo entry

  Todo main text...

[/TYPE]

[TYPE :Priority_level: <TASK_ORDER>] One line todo entry [/TYPE]
@end example

@node Markup Types,Priority_level,Markup syntax,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications markup-types}@anchor{6a}
@section Markup Types


@strong{TYPE} (can be):

@menu
* Before complete the task;: Before complete the task. 
* After complete the task;: After complete the task. 
* Summary of TYPE:: 

@end menu

@node Before complete the task,After complete the task,,Markup Types
@anchor{mk-project_todo_file_specifications before-complete-the-task}@anchor{6b}
@subsection Before complete the task:



@itemize +

@item 
@strong{BUG} (@emph{A bug have to be fixed}).

@item 
@strong{FIXME} (@emph{A problem has to be fixed}).

@item 
@strong{TEST} (@emph{You have to test a feature}).

@item 
@strong{CORRECT} (@emph{Something must be corrected}).

@item 
@strong{REDO} (@emph{Something must be redone}).

@item 
@strong{COMMENT} (@emph{You must make a comment}).

@item 
@strong{TODO} (@emph{Something must be done}).

@item 
@strong{IDEA} (@emph{You get an idea for something}).
@end itemize

@node After complete the task,Summary of TYPE,Before complete the task,Markup Types
@anchor{mk-project_todo_file_specifications after-complete-the-task}@anchor{6c}
@subsection After complete the task:



@itemize +

@item 
@strong{BUGFIX} (@emph{The bug is fixed}).

@item 
@strong{FIXED}  (@emph{The problem is fixed}).

@item 
@strong{TESTED} (@emph{The test is done}).

@item 
@strong{CORRECTED}  (@emph{The correction is done}).

@item 
@strong{REDONE} (@emph{The task is rewritten}).

@item 
@strong{COMMENTED} (@emph{The commenting is done}).

@item 
@strong{DONE} (@emph{The task TODO is DONE}).

@item 
@strong{IDIE} (@emph{The idea is complete (become true)}).
@end itemize

@node Summary of TYPE,,After complete the task,Markup Types
@anchor{mk-project_todo_file_specifications summary-of-type}@anchor{6d}
@subsection Summary of TYPE



@itemize +

@item 
@strong{BUG} or @strong{BUGFIX}

@item 
@strong{FIXME} or @strong{FIXED}

@item 
@strong{TEST} or @strong{TESTED}

@item 
@strong{CORRECT} or @strong{CORRECTED}

@item 
@strong{REDO} or @strong{REDONE}

@item 
@strong{COMMENT} or @strong{COMMENTED}

@item 
@strong{TODO} or @strong{DONE}

@item 
@strong{IDEA} or @strong{IDIE}
@end itemize

@node Priority_level,TASK_ORDER,Markup Types,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications priority-level}@anchor{6e}
@section Priority_level


@strong{Priority_level} (can take following values:)

@quotation


@itemize +

@item 
@strong{High}

@item 
@strong{Medium}

@item 
@strong{Low}
@end itemize
@end quotation

@node TASK_ORDER,Advices,Priority_level,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications task-order}@anchor{6f}
@section TASK_ORDER


@strong{TASK_ORDER} (can be)


@enumerate 

@item 
a @strong{2} (Maybe @emph{3} or @emph{4}) digits sequences for organizing.

@item 
a digit and a @strong{UPPERCASE} letter with meaning:
@end enumerate

@quotation


@itemize +

@item 
By @strong{TODO}, @strong{TEST}, @strong{IDEA} entries


@itemize -

@item 
@strong{F} -> @emph{Free time}

@item 
@strong{N} -> @emph{Normal} (When possible)

@item 
@strong{U} -> @emph{Urgent}
@end itemize

@item 
By @strong{CORRECT}, @strong{BUG} and @strong{FIXME}


@itemize -

@item 
@strong{I} -> @emph{Info}

@item 
@strong{W} -> @emph{Warning}

@item 
@strong{F} -> @emph{Fatal}
@end itemize
@end itemize

@*note: 
the digit(s) are zero per default but it can take a value
between 0-9 for very organized structures.

@end quotation

@c Task organizing ! <TASK_ORDER> ordering specification.

@*note: 
This can be omit. Only @strong{TYPE} and @strong{Priority_level} are mandatory.


@*Summary: 
The @strong{TASK_ORDER} are written between @code{<} and @code{>}.

Can be composed either of:


@itemize *

@item 
@strong{2} digits representing the @emph{task priority}.

@item 
A digit and a special mean @strong{UPPERCASE} letter.
@end itemize

@*syntax: 
<[0-9][0-9|[F|N|U]|[I|W|F]]>


@*example: 
[TODO :Medium: <0F>] Make a new icon because actual is ugly !!! [/TODO]



@node Advices,Syntax of * todo file s content,TASK_ORDER,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications advices}@anchor{70}
@section Advices


@strong{*.todo} files extensibility:


@enumerate 

@item 
Every entry @strong{TYPE} can be invented but must be written in @strong{UPPERCASE}.
@end enumerate

@quotation

@*advice: 
use only one word. (Else use @strong{'_'}).


@strong{DFY} (@emph{Don't Forget Yourself: this make sens}),

@strong{DRY} (@emph{Don't Repeat Yourself: don't be stupid}),

@strong{KISS} (@emph{Keep It Simple Stupid: be concise}).
@end quotation


@enumerate 2

@item 
Priority level can be added as long as they are one Capitalize word.

@item 
@strong{DIY} (@emph{Do It Yourself}) for the @strong{TASK_ORDER} or in order to maintain them ordered.
@end enumerate

@*Advice: 
Keep terminal width max 79 chars a line.


@example
The Best for the End: Think at things like timestamps,

doing order, prerequisite for task, and so soon !!!
@end example

@node Syntax of * todo file s content,End word of specifications of the * todo file s format,Advices,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications syntax-of-todo-file-s-content}@anchor{71}
@section Syntax of @strong{*.todo} file(s) content


You can use the @code{ReST} or @code{Markdown} syntax for the content between or inside the marks.

@menu
* For Titles:: 
* For text decorations;: For text decorations. 
* For Lists;: For Lists. 
* For keywords values pairing;: For keywords values pairing. 
* For links;: For links. 
* For footnotes;: For footnotes. 
* For comments;: For comments. 
* For code text;: For code text. 

@end menu

@node For Titles,For text decorations,,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-titles}@anchor{72}
@subsection For Titles


@example
==============
My first Title
==============

***************
My second title
***************

##############
My third title
##############

+++++++++++++++
My fourth title
+++++++++++++++

::::::::::::::
My fifth title
::::::::::::::

--------------
My sixth title
--------------

~~~~~~~~~~~~~~~~
My seventh title
~~~~~~~~~~~~~~~~
@end example

@node For text decorations,For Lists,For Titles,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-text-decorations}@anchor{73}
@subsection For text decorations:


@example
**bold**

*italic*

_underline_

`@w{`}inline literals`@w{`}

--strike-trough--

^^over-line^^
@end example

@node For Lists,For keywords values pairing,For text decorations,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-lists}@anchor{74}
@subsection For Lists:


@example
+ List item 1

  - Sub list item 1

  - Sub list item 2

+ List item 2

  1. First numbered list item.

  2. Second numbered list item.

  3. Third numbered list item.

+ List item 3

  Definition list title

    Definition list text
@end example

@node For keywords values pairing,For links,For Lists,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-keywords-values-pairing}@anchor{75}
@subsection For keywords values pairing:


@example
:author: foo bar

:license: fdl

:version: 1.0.0
@end example

@node For links,For footnotes,For keywords values pairing,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-links}@anchor{76}
@subsection For links:


@example
`Link text <http://www.domain.com/folder/file.html>`
@end example

@node For footnotes,For comments,For links,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-footnotes}@anchor{77}
@subsection For footnotes:


@example
[*] my footnote text
@end example

@node For comments,For code text,For footnotes,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-comments}@anchor{78}
@subsection For comments:


@example
# My comment line
@end example

@node For code text,,For comments,Syntax of * todo file s content
@anchor{mk-project_todo_file_specifications for-code-text}@anchor{79}
@subsection For code text:


@example
[:LANGUAGE:]

  Indented text is code !
@end example

Per example for C code:

@example
[:C:]

  const char *var = "value" ;
@end example

@node End word of specifications of the * todo file s format,Example of a * todo file,Syntax of * todo file s content,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications end-word-of-specifications-of-the-todo-file-s-format}@anchor{7a}
@section End word of specifications of the *.todo file(s) format


Do what you must with this specifications and take it like an TODO file

structuring advice, but this document was establish to define the

specifications of a clean TODO file.

@node Example of a * todo file,License,End word of specifications of the * todo file s format,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications example-of-a-todo-file}@anchor{7b}
@section Example of a *.todo file:


An example from a real *.todo file from one of my projects.

@example
IT-EDIT TODO:
+++++++++++++

[IDEA :Low:] Advertisement for it-edit:

  it-edit provide so many schemes (more than the underlying library per default) because per example the

  emacs scheme support italic for the ReST or Markdown language which the kate scheme doesn't support.

  But I think the kate scheme is more adapt, with his settings, for program source code writing in terms of syntax coloration.

  And the emacs theme is better to use for ReST per example, because of better syntax coloration of italic.

  So better get 2 schemes, which you can easily switch, than missing a feature.

[/IDEA]

Editor
======

[IDEA :High:] Make the text-completion configurable.

  1. The text completion is one per file.

  2. The text-completion is one for all files (**not easy**).

[/IDEA]

[TODO :High:] Make the regex replacement become true. (See GLib regex) [/TODO]

[IDEA :Medium:] What about enable/disable spell-check ? [/IDEA]

Schemes
-------

[BUG :High:]

They is a highlight problem with the search all highlight with emacs schemes.

[/BUG]


[IDEA :low: <0F>]

Think of schemes pairs like:

  + kate && emacs (bg white)

  + cobalt && turbo (bg blue)

  + tango && classic (Are settings defendant).

  + vsdark && oblivion (bg maroon).

  + slate && solarized-dark. (bg turquoise)

  + build && solarized-light (bg light yellow).

  + matrix (standalone).

[/IDEA]

Terminals
=========

[IDEA :Medium:] Maybe a (main  start) settings individually for every different terminals and/or a main (main  start) settings configuration. [/IDEA]

[TODO :Medium:] Open a file into an editor tab with a terminal pattern [/TODO]

Files
=====

[TODO :Medium:] Add a ChangeLog entry !

  The clipboard from the terminals has been upgraded from severals functionalities.

[/TODO]
@end example

@node License,,Example of a * todo file,* todo or * tdo file format specifications
@anchor{mk-project_todo_file_specifications license}@anchor{7c}
@section License


@example
Copyright (c)  2016,2017  Brüggemann Eddie.

Permission is granted to copy, distribute and/or modify this document

under the terms of the GNU Free Documentation License, Version 1.3

or any later version published by the Free Software Foundation;

with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

A copy of the license is included in the section entitled "GNU

Free Documentation License".
@end example

@node About mk-project,mk-project Gtk3 types,* todo or * tdo file format specifications,Top
@anchor{mk-project_about about-mk-project}@anchor{7d}@anchor{mk-project_about doc}@anchor{7e}
@chapter About @strong{mk-project}


@*author: 
Eddie Brüggemann <@email{mrcyberfighter@@gmail.com}>


@*documenter: 
Eddie Brüggemann <@email{mrcyberfighter@@gmail.com}>


@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@menu
* A word from the author:: 
* Dependencies:: 

@end menu

@node A word from the author,Dependencies,,About mk-project
@anchor{mk-project_about a-word-from-the-author}@anchor{7f}
@section A word from the author


I must recognize to write a program which @strong{generates} and @strong{parse} @emph{severals files} is @strong{painfull} in the @strong{C} @emph{programming language}.

But I hope @emph{that the community will adopt this usefull tool...}

@c Which I will use starting every new project with,

@c because I use a :abbr:`I.T.E (Integrated Terminals Editor)` editor named `it-edit <http://www.open-source-projects.net/IT-Edit/IT-Edit_presentation.html>`_,

@c so I have a terminal on my sidebar (with another otherwere) and I now the *targets* (I'm not an :abbr:`I.D.E (Integrated Development Environment)` **zombie**).

I dislike @abbr{I.D.E,Integrated Development Environment}'s because their advantages is their weak point:

@quotation

They let you make forget everything once you have configurate their interface.

Even how to build your program (i.e. The command line to build your program, you know it ?).
@end quotation

@emph{I use the commandline everyday} and by doing a @strong{good compromise} between @strong{automating task} and doesn't forget @strong{how the command works}.

Is issue @strong{mk-project}...

The adding of the @code{Edit terminals} is suppose for @code{ed}, @code{vi}, @code{emacs}, etc users.

And the @abbr{G.U.I} @code{make} targets launching can be extend @ref{f,,like explain in the presentation}.

@strong{Finally}: I hope you will join us to make @strong{mk-project} support more and more programming languages.

@*note: 
I have put all my @emph{savoir-faire} in this project for you and the entire community.


@node Dependencies,,A word from the author,About mk-project
@anchor{mk-project_about dependencies}@anchor{80}
@section Dependencies


@menu
* Libraries:: 
* Main program:: 
* Documentation: Documentation<2>. 
* Debugging:: 
* Code formatters:: 
* Internationalisation:: 
* Documentation Source: Documentation Source<2>. 
* THANKS:: 
* Author final word;: Author final word. 

@end menu

@node Libraries,Main program,,Dependencies
@anchor{mk-project_about libraries}@anchor{81}
@subsection Libraries



@itemize +

@item 
@code{libgtk-3-dev}

@item 
@code{libvte-2.91-dev}

@item 
@code{libxml2-dev}
@end itemize

@node Main program,Documentation<2>,Libraries,Dependencies
@anchor{mk-project_about main-program}@anchor{82}
@subsection Main program



@itemize +

@item 
The @code{make} program.

@item 
@code{coreutils}
@end itemize

@node Documentation<2>,Debugging,Main program,Dependencies
@anchor{mk-project_about documentation}@anchor{83}
@subsection Documentation



@itemize +

@item 
@code{python(3)-sphinx}

@item 
@code{python(3)-docutils}
@end itemize

@node Debugging,Code formatters,Documentation<2>,Dependencies
@anchor{mk-project_about debugging}@anchor{84}
@subsection Debugging



@itemize +

@item 
@code{binutils}

@item 
@code{libc-bin}

@item 
@code{findutils}

@item 
@code{file}

@item 
@code{size}

@item 
@code{hexdump}
@end itemize

@*note: 
Only required if you make usage of them, else the corresponding target won't be available.


@node Code formatters,Internationalisation,Debugging,Dependencies
@anchor{mk-project_about code-formatters}@anchor{85}
@subsection Code formatters



@itemize +

@item 
@code{indent}

@item 
@code{astyle}

@item 
@code{bcpp}
@end itemize

@*note: 
Only required if you make usage of them, else the corresponding target won't be available.


@node Internationalisation,Documentation Source<2>,Code formatters,Dependencies
@anchor{mk-project_about internationalisation}@anchor{86}
@subsection Internationalisation



@itemize +

@item 
@code{gettext}
@end itemize

@*note: 
Only required if you make usage of them, else the corresponding target won't be available.


@node Documentation Source<2>,THANKS,Internationalisation,Dependencies
@anchor{mk-project_about documentation-source}@anchor{87}
@subsection Documentation Source



@itemize +

@item 
@code{GNU Make manual} (A very good manual from the GNU manuals serie).
@end itemize

@*authors: 
Stallman, McGrath, Smith.



@itemize +

@item 
@code{C/C++ Compiling} (A very good book about libraries and machine code investigation).
@end itemize

@*author: 
Milan Stevanovic.



@itemize +

@item 
@code{Writing efficient C code}.
@end itemize

@*author: 
Jonas Skeppstedt (author of the compiler @ref{88,,ISO Certicated and Validated} @code{lmpcc}).


@menu
* ISO (ISO/IEC 9899;19999@comma{} C language) conform compiler list: ISO ISO/IEC 9899 19999 C language conform compiler list. 

@end menu

@node ISO ISO/IEC 9899 19999 C language conform compiler list,,,Documentation Source<2>
@anchor{mk-project_about iso-conform-compiler-list}@anchor{88}@anchor{mk-project_about iso-iso-iec-9899-19999-c-language-conform-compiler-list}@anchor{89}
@subsubsection ISO (ISO/IEC 9899:19999, C language) conform compiler list



@itemize +

@item 
EDG C/C++ 3.0.1, december 2002.

@item 
lmpcc C99 Compiler for Linux / PowerPC 1.3, july 2003.

@item 
Sun studio 9, May 2004.

@item 
IBM VAC 6.0.0.8, October 2004.
@end itemize

@*note: 
No @code{gcc} neither @code{clang} are certified to be fully compliant with it.


@node THANKS,Author final word,Documentation Source<2>,Dependencies
@anchor{mk-project_about thanks}@anchor{8a}
@subsection THANKS


@quotation


@itemize +

@item 
Dennis M Ritchie, for UNIX and C.

@item 
Richard Stallman, for gcc and the F.S.F movement.

@item 
Ken Tompson, for UNIX.

@item 
Linus Tornvalds, for Linux and git.

@item 
And to every worker for a better world...
@end itemize
@end quotation

@node Author final word,,THANKS,Dependencies
@anchor{mk-project_about author-final-word}@anchor{8b}
@subsection Author final word:


I use @code{mk-project} since the version @strong{1.0} (spring @emph{2016}) for my programs.

Accompanier with my terminals integrated editor it-edit@footnote{http://www.open-source-projects.net/it-edit/it-edit},

where I type my targets instead of using vim or any other @abbr{T.U.I Terminal User Interface}.

I must confess that I do not use all the targets provided by mk-project.

My most used targets are:

@example
$ make

$ make -B

$ make exec

$ make fdebug

$ make gdb

$ make search-pattern argv="pattern"

...
@end example

@c Copyright (c)  2016,2017  Brüggemann Eddie.
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3
@c or any later version published by the Free Software Foundation;
@c with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@c A copy of the license is included in the section entitled "GNU
@c Free Documentation License".

@node mk-project Gtk3 types,Indices and tables,About mk-project,Top
@anchor{mk-project-gtk3-types mk-project-gtk3-types}@anchor{8c}@anchor{mk-project-gtk3-types doc}@anchor{8d}
@chapter @code{mk-project} Gtk3 types


@code{mk-project} implement some few derivate Widgets, which I will present here.

You can take a look at the source located in the sub-folders from @code{/usr(/local)/share/mk-project/src}.

To learn how to implement this kind of Widgets:

@*note: 
Here you can sea how a sphinx documentation looks like, with this theme, for C code (c++ code can be documented too) with sphinx.


@menu
* GtkSmartIconButton:: 
* GtkSmartIconButton: GtkSmartIconButton<2>. 
* GtkTermTab:: 
* GtkMkTerm:: 

@end menu

@node GtkSmartIconButton,GtkSmartIconButton<2>,,mk-project Gtk3 types
@anchor{mk-project-gtk3-types gtksmarticonbutton}@anchor{8e}
@section GtkSmartIconButton


A simple button with an icon without label and tool-tip which embed an universal short-cut text.


@deffn {C Function} GtkWidget* gtk_smart_menu_item_new_all(const gchar *label, const gchar *icon_filepath, GtkAccelGroup *accel_group, const GdkModifierType accel_modifier, const guint accel_key) ;

@*Parameters: 

@itemize *

@item 
@code{label} (@code{const gchar *}) -- The label to display into the menu item.

@item 
@code{icon_filepath} (@code{const gchar *}) -- The menu item icon file-path.

@item 
@code{accel_group} (@code{GtkAccelGroup *}) -- The shortcut accelerator group.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkSmartMenuItem}.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_check_menu_item_new_all(const gchar *label, const gboolean draw_as_radio, const gchar *icon_filepath, GtkAccelGroup *accel_group, const GdkModifierType accel_modifier, const guint accel_key) ;

@*Parameters: 

@itemize *

@item 
@code{label} (@code{const gchar *}) -- The label to display into the menu item.

@item 
@code{draw_as_radio} (@code{const gboolean}) -- draw_as_radio

@item 
@code{icon_filepath} (@code{const gchar *}) -- The menu item icon file-path.

@item 
@code{accel_group} (@code{GtkAccelGroup *}) -- The shortcut accelerator group.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkSmartMenuItem} check button.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_radio_menu_item_new_all(const gchar *label, const gchar *icon_filepath, GtkAccelGroup *accel_group, const GdkModifierType accel_modifier, const guint accel_key, GtkWidget* widget) ;

@*Parameters: 

@itemize *

@item 
@code{label} (@code{const gchar *}) -- The label to display into the menu item.

@item 
@code{draw_as_radio} (@code{const gboolean}) -- draw_as_radio

@item 
@code{icon_filepath} (@code{const gchar *}) -- The menu item icon file-path.

@item 
@code{accel_group} (@code{GtkAccelGroup *}) -- The shortcut accelerator group.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.

@item 
@code{widget} (@code{NULL} or @code{GtkWidget*}) -- A member from the radio button group.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkSmartMenuItem} radio button.

@end deffn

@cartouche
@quotation Note 
You can pass a @code{NULL} pointer or @code{0} to the parameters :


@itemize *

@item 
icon_filepath

@item 
accel_group

@item 
accel_modifier

@item 
accel_key.

@item 
widgets.
@end itemize
@end quotation
@end cartouche

@*note: 
You can build others constructors if you have understand How-To build this kind of widgets.


@menu
* Getters:: 

@end menu

@node Getters,,,GtkSmartIconButton
@anchor{mk-project-gtk3-types getters}@anchor{8f}
@subsection Getters



@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_image(GtkWidget* smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget*}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkImage} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_menuitem(GtkWidget* smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget*}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkMenuItem} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_label(GtkWidget* smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget*}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkLabel} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_menu_item_get_accel_label(GtkWidget* smart_menu_item) ;

@*Parameters: 

@itemize *

@item 
@code{smart_menu_item} (@code{GtkWidget*}) -- The return value from the constructors.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkAccelLabel} widget.

@end deffn

@node GtkSmartIconButton<2>,GtkTermTab,GtkSmartIconButton,mk-project Gtk3 types
@anchor{mk-project-gtk3-types id1}@anchor{90}
@section GtkSmartIconButton


A simple button with an icon without label and tool-tip which embed an universal short-cut text.

@menu
* Constructors:: 

@end menu

@node Constructors,,,GtkSmartIconButton<2>
@anchor{mk-project-gtk3-types constructors}@anchor{91}
@subsection Constructors



@deffn {C Function} GtkWidget* gtk_smart_icon_button_new_all(const gchar *filepath, const gchar *tooltip_text, const guint accel_key, const GdkModifierType accel_modifier) ;

@*Parameters: 

@itemize *

@item 
@code{filepath} (@code{const gchar *}) -- The filepath to the image to use as icon.

@item 
@code{tooltip_text} (@code{const gchar *}) -- The tool-tip text without the accelerator label.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkSmartIconButton} widget.

@end deffn


@deffn {C Function} GtkWidget* gtk_smart_icon_toggle_button_new_all(const gchar *filepath, const gchar *tooltip_text, const guint accel_key, const GdkModifierType accel_modifier) ;

@*Parameters: 

@itemize *

@item 
@code{filepath} (@code{const gchar *}) -- The filepath to the image to use as icon.

@item 
@code{tooltip_text} (@code{const gchar *}) -- The tool-tip text without the accelerator label.

@item 
@code{accel_key} (@code{const guint}) -- The shortcut accelerator key.

@item 
@code{accel_modifier} (@code{const GdkModifierType}) -- The shortcut modifier.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkSmartIconButton} toggle button widget.

@end deffn

@*note: 
This widget is not used into @code{mk-project} but provided in the hope to be useful.


@node GtkTermTab,GtkMkTerm,GtkSmartIconButton<2>,mk-project Gtk3 types
@anchor{mk-project-gtk3-types gtktermtab}@anchor{92}
@section GtkTermTab


@quotation

A GtkNoteBook tab with an decorative icon, a label, and close icon button.
@end quotation

@menu
* Constructor:: 
* Getters: Getters<2>. 

@end menu

@node Constructor,Getters<2>,,GtkTermTab
@anchor{mk-project-gtk3-types constructor}@anchor{93}
@subsection Constructor



@deffn {C Function} GtkWidget* gtk_mk_term_tab_new(const gchar *icon_filepath, const gchar *label, const gchar *close_filepath) ;

@*Parameters: 

@itemize *

@item 
@code{icon_filepath} (@code{const gchar *}) -- Image filepath to display as decoration on the right of the tab-label.

@item 
@code{label} (@code{const gchar *}) -- The label to display in the @code{GtkMkTermTab}.

@item 
@code{close_filepath} (@code{const gchar *}) -- Image filepath to display in the @code{GtkMkTermTab} as close button icon.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the Widget @code{GtkMkTerm}.

@end deffn

@node Getters<2>,,Constructor,GtkTermTab
@anchor{mk-project-gtk3-types id2}@anchor{94}
@subsection Getters



@deffn {C Function} GtkWidget* gtk_mk_term_tab_get_close_button(GtkMkTermTab *tab);

@*Parameters: 

@itemize *

@item 
@code{tab} (@code{const gchar *}) -- An instance of the @code{GtkMkTermTab}.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the Widget @code{GtkButton} at the right of the label.

@end deffn

@node GtkMkTerm,,GtkTermTab,mk-project Gtk3 types
@anchor{mk-project-gtk3-types gtkmkterm}@anchor{95}
@section GtkMkTerm


@*warning: 
This widget implementation is not reusable as is, because of @code{VteTerminal} configuration variables.


@menu
* Constructor: Constructor<2>. 
* Getters: Getters<3>. 

@end menu

@node Constructor<2>,Getters<3>,,GtkMkTerm
@anchor{mk-project-gtk3-types id3}@anchor{96}
@subsection Constructor



@deffn {C Function} GtkWidget* gtk_mkterm_new(gboolean initialize, gboolean is_edit_term) ;

@*Parameters: 

@itemize *

@item 
@code{initialize} (@code{gboolean}) -- Initializing or reconfiguring the @code{GtkMkTerm}.

@item 
@code{is_edit_term} (@code{gboolean}) -- Whether or not the @code{GtkMkTerm} is a editor widget.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the Widget @code{GtkMkTerm}.

@end deffn

@node Getters<3>,,Constructor<2>,GtkMkTerm
@anchor{mk-project-gtk3-types id4}@anchor{97}
@subsection Getters



@deffn {C Function} GtkWidget* gtk_mkterm_get_vte_terminal(GtkWidget* mkterm) ;

@*Parameters: 

@itemize *

@item 
@code{mkterm} (@code{GtkWidget*}) -- An instance of the @code{GtkMkTerm} Widget.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{VteTerminal}.

@end deffn


@deffn {C Function} GtkWidget* gtk_mkterm_get_clipboard_menu(GtkWidget* mkterm) ;

@*Parameters: 

@itemize *

@item 
@code{mkterm} (@code{GtkWidget*}) -- Initializing or reconfiguring the @code{GtkMkTerm}.
@end itemize


@*Return type: 
@code{GtkWidget*}


@*Returns: 
A pointer to the @code{GtkMenu} associated to the @code{GtkMkTerm}.

@end deffn

@node Indices and tables,Index,mk-project Gtk3 types,Top
@anchor{index indices-and-tables}@anchor{98}
@unnumbered Indices and tables



@itemize *

@item 
genindex

@item 
modindex

@item 
search
@end itemize

@node Index,,Indices and tables,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
